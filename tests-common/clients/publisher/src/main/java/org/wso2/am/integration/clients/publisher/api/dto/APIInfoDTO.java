/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.wso2.am.integration.clients.publisher.api.dto.APIInfoAdditionalPropertiesInnerDTO;
import org.wso2.am.integration.clients.publisher.api.dto.APIInfoAdditionalPropertiesMapValueDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.am.integration.clients.publisher.JSON;

/**
 * APIInfoDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0-SNAPSHOT")
public class APIInfoDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @jakarta.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @jakarta.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @jakarta.annotation.Nullable
  private String context;

  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  @jakarta.annotation.Nullable
  private List<APIInfoAdditionalPropertiesInnerDTO> additionalProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES_MAP = "additionalPropertiesMap";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES_MAP)
  @jakarta.annotation.Nullable
  private Map<String, APIInfoAdditionalPropertiesMapValueDTO> additionalPropertiesMap = new HashMap<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @jakarta.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  @jakarta.annotation.Nullable
  private String provider;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @jakarta.annotation.Nullable
  private String type;

  /**
   * The audience of the API. Accepted values are PUBLIC, SINGLE
   */
  @JsonAdapter(AudienceEnum.Adapter.class)
  public enum AudienceEnum {
    PUBLIC("PUBLIC"),
    
    SINGLE("SINGLE");

    private String value;

    AudienceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudienceEnum fromValue(String value) {
      for (AudienceEnum b : AudienceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudienceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudienceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudienceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudienceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudienceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  @jakarta.annotation.Nullable
  private AudienceEnum audience;

  public static final String SERIALIZED_NAME_AUDIENCES = "audiences";
  @SerializedName(SERIALIZED_NAME_AUDIENCES)
  @jakarta.annotation.Nullable
  private List<String> audiences = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFE_CYCLE_STATUS = "lifeCycleStatus";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE_STATUS)
  @jakarta.annotation.Nullable
  private String lifeCycleStatus;

  public static final String SERIALIZED_NAME_WORKFLOW_STATUS = "workflowStatus";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_STATUS)
  @jakarta.annotation.Nullable
  private String workflowStatus;

  public static final String SERIALIZED_NAME_HAS_THUMBNAIL = "hasThumbnail";
  @SerializedName(SERIALIZED_NAME_HAS_THUMBNAIL)
  @jakarta.annotation.Nullable
  private Boolean hasThumbnail;

  public static final String SERIALIZED_NAME_SECURITY_SCHEME = "securityScheme";
  @SerializedName(SERIALIZED_NAME_SECURITY_SCHEME)
  @jakarta.annotation.Nullable
  private List<String> securityScheme = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  @jakarta.annotation.Nullable
  private String createdTime;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updatedTime";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  @jakarta.annotation.Nullable
  private String updatedTime;

  public static final String SERIALIZED_NAME_GATEWAY_VENDOR = "gatewayVendor";
  @SerializedName(SERIALIZED_NAME_GATEWAY_VENDOR)
  @jakarta.annotation.Nullable
  private String gatewayVendor;

  public static final String SERIALIZED_NAME_ADVERTISE_ONLY = "advertiseOnly";
  @SerializedName(SERIALIZED_NAME_ADVERTISE_ONLY)
  @jakarta.annotation.Nullable
  private Boolean advertiseOnly;

  public APIInfoDTO() {
  }

  public APIInfoDTO id(@jakarta.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }


  public APIInfoDTO name(@jakarta.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }


  public APIInfoDTO description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public APIInfoDTO context(@jakarta.annotation.Nullable String context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @jakarta.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(@jakarta.annotation.Nullable String context) {
    this.context = context;
  }


  public APIInfoDTO additionalProperties(@jakarta.annotation.Nullable List<APIInfoAdditionalPropertiesInnerDTO> additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  public APIInfoDTO addAdditionalPropertiesItem(APIInfoAdditionalPropertiesInnerDTO additionalPropertiesItem) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new ArrayList<>();
    }
    this.additionalProperties.add(additionalPropertiesItem);
    return this;
  }

  /**
   * Map of custom properties of API
   * @return additionalProperties
   */
  @jakarta.annotation.Nullable
  public List<APIInfoAdditionalPropertiesInnerDTO> getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(@jakarta.annotation.Nullable List<APIInfoAdditionalPropertiesInnerDTO> additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public APIInfoDTO additionalPropertiesMap(@jakarta.annotation.Nullable Map<String, APIInfoAdditionalPropertiesMapValueDTO> additionalPropertiesMap) {
    this.additionalPropertiesMap = additionalPropertiesMap;
    return this;
  }

  public APIInfoDTO putAdditionalPropertiesMapItem(String key, APIInfoAdditionalPropertiesMapValueDTO additionalPropertiesMapItem) {
    if (this.additionalPropertiesMap == null) {
      this.additionalPropertiesMap = new HashMap<>();
    }
    this.additionalPropertiesMap.put(key, additionalPropertiesMapItem);
    return this;
  }

  /**
   * Get additionalPropertiesMap
   * @return additionalPropertiesMap
   */
  @jakarta.annotation.Nullable
  public Map<String, APIInfoAdditionalPropertiesMapValueDTO> getAdditionalPropertiesMap() {
    return additionalPropertiesMap;
  }

  public void setAdditionalPropertiesMap(@jakarta.annotation.Nullable Map<String, APIInfoAdditionalPropertiesMapValueDTO> additionalPropertiesMap) {
    this.additionalPropertiesMap = additionalPropertiesMap;
  }


  public APIInfoDTO version(@jakarta.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@jakarta.annotation.Nullable String version) {
    this.version = version;
  }


  public APIInfoDTO provider(@jakarta.annotation.Nullable String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * If the provider value is not given, the user invoking the API will be used as the provider. 
   * @return provider
   */
  @jakarta.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(@jakarta.annotation.Nullable String provider) {
    this.provider = provider;
  }


  public APIInfoDTO type(@jakarta.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@jakarta.annotation.Nullable String type) {
    this.type = type;
  }


  public APIInfoDTO audience(@jakarta.annotation.Nullable AudienceEnum audience) {
    this.audience = audience;
    return this;
  }

  /**
   * The audience of the API. Accepted values are PUBLIC, SINGLE
   * @return audience
   */
  @jakarta.annotation.Nullable
  public AudienceEnum getAudience() {
    return audience;
  }

  public void setAudience(@jakarta.annotation.Nullable AudienceEnum audience) {
    this.audience = audience;
  }


  public APIInfoDTO audiences(@jakarta.annotation.Nullable List<String> audiences) {
    this.audiences = audiences;
    return this;
  }

  public APIInfoDTO addAudiencesItem(String audiencesItem) {
    if (this.audiences == null) {
      this.audiences = new ArrayList<>();
    }
    this.audiences.add(audiencesItem);
    return this;
  }

  /**
   * The audiences of the API for jwt validation. Accepted values are any String values
   * @return audiences
   */
  @jakarta.annotation.Nullable
  public List<String> getAudiences() {
    return audiences;
  }

  public void setAudiences(@jakarta.annotation.Nullable List<String> audiences) {
    this.audiences = audiences;
  }


  public APIInfoDTO lifeCycleStatus(@jakarta.annotation.Nullable String lifeCycleStatus) {
    this.lifeCycleStatus = lifeCycleStatus;
    return this;
  }

  /**
   * Get lifeCycleStatus
   * @return lifeCycleStatus
   */
  @jakarta.annotation.Nullable
  public String getLifeCycleStatus() {
    return lifeCycleStatus;
  }

  public void setLifeCycleStatus(@jakarta.annotation.Nullable String lifeCycleStatus) {
    this.lifeCycleStatus = lifeCycleStatus;
  }


  public APIInfoDTO workflowStatus(@jakarta.annotation.Nullable String workflowStatus) {
    this.workflowStatus = workflowStatus;
    return this;
  }

  /**
   * Get workflowStatus
   * @return workflowStatus
   */
  @jakarta.annotation.Nullable
  public String getWorkflowStatus() {
    return workflowStatus;
  }

  public void setWorkflowStatus(@jakarta.annotation.Nullable String workflowStatus) {
    this.workflowStatus = workflowStatus;
  }


  public APIInfoDTO hasThumbnail(@jakarta.annotation.Nullable Boolean hasThumbnail) {
    this.hasThumbnail = hasThumbnail;
    return this;
  }

  /**
   * Get hasThumbnail
   * @return hasThumbnail
   */
  @jakarta.annotation.Nullable
  public Boolean getHasThumbnail() {
    return hasThumbnail;
  }

  public void setHasThumbnail(@jakarta.annotation.Nullable Boolean hasThumbnail) {
    this.hasThumbnail = hasThumbnail;
  }


  public APIInfoDTO securityScheme(@jakarta.annotation.Nullable List<String> securityScheme) {
    this.securityScheme = securityScheme;
    return this;
  }

  public APIInfoDTO addSecuritySchemeItem(String securitySchemeItem) {
    if (this.securityScheme == null) {
      this.securityScheme = new ArrayList<>();
    }
    this.securityScheme.add(securitySchemeItem);
    return this;
  }

  /**
   * Get securityScheme
   * @return securityScheme
   */
  @jakarta.annotation.Nullable
  public List<String> getSecurityScheme() {
    return securityScheme;
  }

  public void setSecurityScheme(@jakarta.annotation.Nullable List<String> securityScheme) {
    this.securityScheme = securityScheme;
  }


  public APIInfoDTO createdTime(@jakarta.annotation.Nullable String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @jakarta.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(@jakarta.annotation.Nullable String createdTime) {
    this.createdTime = createdTime;
  }


  public APIInfoDTO updatedTime(@jakarta.annotation.Nullable String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @jakarta.annotation.Nullable
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(@jakarta.annotation.Nullable String updatedTime) {
    this.updatedTime = updatedTime;
  }


  public APIInfoDTO gatewayVendor(@jakarta.annotation.Nullable String gatewayVendor) {
    this.gatewayVendor = gatewayVendor;
    return this;
  }

  /**
   * Get gatewayVendor
   * @return gatewayVendor
   */
  @jakarta.annotation.Nullable
  public String getGatewayVendor() {
    return gatewayVendor;
  }

  public void setGatewayVendor(@jakarta.annotation.Nullable String gatewayVendor) {
    this.gatewayVendor = gatewayVendor;
  }


  public APIInfoDTO advertiseOnly(@jakarta.annotation.Nullable Boolean advertiseOnly) {
    this.advertiseOnly = advertiseOnly;
    return this;
  }

  /**
   * Get advertiseOnly
   * @return advertiseOnly
   */
  @jakarta.annotation.Nullable
  public Boolean getAdvertiseOnly() {
    return advertiseOnly;
  }

  public void setAdvertiseOnly(@jakarta.annotation.Nullable Boolean advertiseOnly) {
    this.advertiseOnly = advertiseOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIInfoDTO apIInfo = (APIInfoDTO) o;
    return Objects.equals(this.id, apIInfo.id) &&
        Objects.equals(this.name, apIInfo.name) &&
        Objects.equals(this.description, apIInfo.description) &&
        Objects.equals(this.context, apIInfo.context) &&
        Objects.equals(this.additionalProperties, apIInfo.additionalProperties) &&
        Objects.equals(this.additionalPropertiesMap, apIInfo.additionalPropertiesMap) &&
        Objects.equals(this.version, apIInfo.version) &&
        Objects.equals(this.provider, apIInfo.provider) &&
        Objects.equals(this.type, apIInfo.type) &&
        Objects.equals(this.audience, apIInfo.audience) &&
        Objects.equals(this.audiences, apIInfo.audiences) &&
        Objects.equals(this.lifeCycleStatus, apIInfo.lifeCycleStatus) &&
        Objects.equals(this.workflowStatus, apIInfo.workflowStatus) &&
        Objects.equals(this.hasThumbnail, apIInfo.hasThumbnail) &&
        Objects.equals(this.securityScheme, apIInfo.securityScheme) &&
        Objects.equals(this.createdTime, apIInfo.createdTime) &&
        Objects.equals(this.updatedTime, apIInfo.updatedTime) &&
        Objects.equals(this.gatewayVendor, apIInfo.gatewayVendor) &&
        Objects.equals(this.advertiseOnly, apIInfo.advertiseOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, context, additionalProperties, additionalPropertiesMap, version, provider, type, audience, audiences, lifeCycleStatus, workflowStatus, hasThumbnail, securityScheme, createdTime, updatedTime, gatewayVendor, advertiseOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIInfoDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    additionalPropertiesMap: ").append(toIndentedString(additionalPropertiesMap)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    audiences: ").append(toIndentedString(audiences)).append("\n");
    sb.append("    lifeCycleStatus: ").append(toIndentedString(lifeCycleStatus)).append("\n");
    sb.append("    workflowStatus: ").append(toIndentedString(workflowStatus)).append("\n");
    sb.append("    hasThumbnail: ").append(toIndentedString(hasThumbnail)).append("\n");
    sb.append("    securityScheme: ").append(toIndentedString(securityScheme)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    gatewayVendor: ").append(toIndentedString(gatewayVendor)).append("\n");
    sb.append("    advertiseOnly: ").append(toIndentedString(advertiseOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("context");
    openapiFields.add("additionalProperties");
    openapiFields.add("additionalPropertiesMap");
    openapiFields.add("version");
    openapiFields.add("provider");
    openapiFields.add("type");
    openapiFields.add("audience");
    openapiFields.add("audiences");
    openapiFields.add("lifeCycleStatus");
    openapiFields.add("workflowStatus");
    openapiFields.add("hasThumbnail");
    openapiFields.add("securityScheme");
    openapiFields.add("createdTime");
    openapiFields.add("updatedTime");
    openapiFields.add("gatewayVendor");
    openapiFields.add("advertiseOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIInfoDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIInfoDTO is not found in the empty JSON string", APIInfoDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIInfoDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIInfoDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) && !jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if (jsonObj.get("additionalProperties") != null && !jsonObj.get("additionalProperties").isJsonNull()) {
        JsonArray jsonArrayadditionalProperties = jsonObj.getAsJsonArray("additionalProperties");
        if (jsonArrayadditionalProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalProperties` to be an array in the JSON string but got `%s`", jsonObj.get("additionalProperties").toString()));
          }

          // validate the optional field `additionalProperties` (array)
          for (int i = 0; i < jsonArrayadditionalProperties.size(); i++) {
            APIInfoAdditionalPropertiesInnerDTO.validateJsonElement(jsonArrayadditionalProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      // validate the optional field `audience`
      if (jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) {
        AudienceEnum.validateJsonElement(jsonObj.get("audience"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audiences") != null && !jsonObj.get("audiences").isJsonNull() && !jsonObj.get("audiences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audiences` to be an array in the JSON string but got `%s`", jsonObj.get("audiences").toString()));
      }
      if ((jsonObj.get("lifeCycleStatus") != null && !jsonObj.get("lifeCycleStatus").isJsonNull()) && !jsonObj.get("lifeCycleStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeCycleStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeCycleStatus").toString()));
      }
      if ((jsonObj.get("workflowStatus") != null && !jsonObj.get("workflowStatus").isJsonNull()) && !jsonObj.get("workflowStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowStatus").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("securityScheme") != null && !jsonObj.get("securityScheme").isJsonNull() && !jsonObj.get("securityScheme").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityScheme` to be an array in the JSON string but got `%s`", jsonObj.get("securityScheme").toString()));
      }
      if ((jsonObj.get("createdTime") != null && !jsonObj.get("createdTime").isJsonNull()) && !jsonObj.get("createdTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTime").toString()));
      }
      if ((jsonObj.get("updatedTime") != null && !jsonObj.get("updatedTime").isJsonNull()) && !jsonObj.get("updatedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedTime").toString()));
      }
      if ((jsonObj.get("gatewayVendor") != null && !jsonObj.get("gatewayVendor").isJsonNull()) && !jsonObj.get("gatewayVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayVendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<APIInfoDTO>() {
           @Override
           public void write(JsonWriter out, APIInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIInfoDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIInfoDTO
   * @throws IOException if the JSON string is invalid with respect to APIInfoDTO
   */
  public static APIInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIInfoDTO.class);
  }

  /**
   * Convert an instance of APIInfoDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


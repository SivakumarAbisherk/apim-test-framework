/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api;

import org.wso2.am.integration.clients.publisher.ApiCallback;
import org.wso2.am.integration.clients.publisher.ApiClient;
import org.wso2.am.integration.clients.publisher.ApiException;
import org.wso2.am.integration.clients.publisher.ApiResponse;
import org.wso2.am.integration.clients.publisher.Configuration;
import org.wso2.am.integration.clients.publisher.Pair;
import org.wso2.am.integration.clients.publisher.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.dto.ErrorDTO;
import java.io.File;
import org.wso2.am.integration.clients.publisher.api.dto.OperationPolicyDataDTO;
import org.wso2.am.integration.clients.publisher.api.dto.OperationPolicyDataListDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiOperationPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiOperationPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiOperationPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAPISpecificOperationPolicy
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param policySpecFile Policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Operation policy uploaded  </td><td>  * Location - The URL of the created gateway policy mapping.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAPISpecificOperationPolicyCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable File policySpecFile, @jakarta.annotation.Nullable File synapsePolicyDefinitionFile, @jakarta.annotation.Nullable File ccPolicyDefinitionFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/operation-policies"
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policySpecFile != null) {
            localVarFormParams.put("policySpecFile", policySpecFile);
        }

        if (synapsePolicyDefinitionFile != null) {
            localVarFormParams.put("synapsePolicyDefinitionFile", synapsePolicyDefinitionFile);
        }

        if (ccPolicyDefinitionFile != null) {
            localVarFormParams.put("ccPolicyDefinitionFile", ccPolicyDefinitionFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAPISpecificOperationPolicyValidateBeforeCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable File policySpecFile, @jakarta.annotation.Nullable File synapsePolicyDefinitionFile, @jakarta.annotation.Nullable File ccPolicyDefinitionFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling addAPISpecificOperationPolicy(Async)");
        }

        return addAPISpecificOperationPolicyCall(apiId, policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile, _callback);

    }

    /**
     * Add an API specific operation policy
     * This operation can be used to add an API specifc operation policy. This policy cannot be used in other APIs. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param policySpecFile Policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @return OperationPolicyDataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Operation policy uploaded  </td><td>  * Location - The URL of the created gateway policy mapping.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public OperationPolicyDataDTO addAPISpecificOperationPolicy(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable File policySpecFile, @jakarta.annotation.Nullable File synapsePolicyDefinitionFile, @jakarta.annotation.Nullable File ccPolicyDefinitionFile) throws ApiException {
        ApiResponse<OperationPolicyDataDTO> localVarResp = addAPISpecificOperationPolicyWithHttpInfo(apiId, policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile);
        return localVarResp.getData();
    }

    /**
     * Add an API specific operation policy
     * This operation can be used to add an API specifc operation policy. This policy cannot be used in other APIs. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param policySpecFile Policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @return ApiResponse&lt;OperationPolicyDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Operation policy uploaded  </td><td>  * Location - The URL of the created gateway policy mapping.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationPolicyDataDTO> addAPISpecificOperationPolicyWithHttpInfo(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable File policySpecFile, @jakarta.annotation.Nullable File synapsePolicyDefinitionFile, @jakarta.annotation.Nullable File ccPolicyDefinitionFile) throws ApiException {
        okhttp3.Call localVarCall = addAPISpecificOperationPolicyValidateBeforeCall(apiId, policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile, null);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an API specific operation policy (asynchronously)
     * This operation can be used to add an API specifc operation policy. This policy cannot be used in other APIs. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param policySpecFile Policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Operation policy uploaded  </td><td>  * Location - The URL of the created gateway policy mapping.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAPISpecificOperationPolicyAsync(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable File policySpecFile, @jakarta.annotation.Nullable File synapsePolicyDefinitionFile, @jakarta.annotation.Nullable File ccPolicyDefinitionFile, final ApiCallback<OperationPolicyDataDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAPISpecificOperationPolicyValidateBeforeCall(apiId, policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile, _callback);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAPISpecificOperationPolicyByPolicyId
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPISpecificOperationPolicyByPolicyIdCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/operation-policies/{operationPolicyId}"
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationPolicyId" + "}", localVarApiClient.escapeString(operationPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAPISpecificOperationPolicyByPolicyIdValidateBeforeCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling deleteAPISpecificOperationPolicyByPolicyId(Async)");
        }

        // verify the required parameter 'operationPolicyId' is set
        if (operationPolicyId == null) {
            throw new ApiException("Missing the required parameter 'operationPolicyId' when calling deleteAPISpecificOperationPolicyByPolicyId(Async)");
        }

        return deleteAPISpecificOperationPolicyByPolicyIdCall(apiId, operationPolicyId, _callback);

    }

    /**
     * Delete an API Specific Operation Policy
     * This operation can be used to delete an existing API specific opreation policy by providing the Id of the API and the Id of the policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAPISpecificOperationPolicyByPolicyId(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId) throws ApiException {
        deleteAPISpecificOperationPolicyByPolicyIdWithHttpInfo(apiId, operationPolicyId);
    }

    /**
     * Delete an API Specific Operation Policy
     * This operation can be used to delete an existing API specific opreation policy by providing the Id of the API and the Id of the policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAPISpecificOperationPolicyByPolicyIdWithHttpInfo(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deleteAPISpecificOperationPolicyByPolicyIdValidateBeforeCall(apiId, operationPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an API Specific Operation Policy (asynchronously)
     * This operation can be used to delete an existing API specific opreation policy by providing the Id of the API and the Id of the policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPISpecificOperationPolicyByPolicyIdAsync(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAPISpecificOperationPolicyByPolicyIdValidateBeforeCall(apiId, operationPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAPISpecificOperationPolicyContentByPolicyId
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPISpecificOperationPolicyContentByPolicyIdCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/operation-policies/{operationPolicyId}/content"
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationPolicyId" + "}", localVarApiClient.escapeString(operationPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAPISpecificOperationPolicyContentByPolicyIdValidateBeforeCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling getAPISpecificOperationPolicyContentByPolicyId(Async)");
        }

        // verify the required parameter 'operationPolicyId' is set
        if (operationPolicyId == null) {
            throw new ApiException("Missing the required parameter 'operationPolicyId' when calling getAPISpecificOperationPolicyContentByPolicyId(Async)");
        }

        return getAPISpecificOperationPolicyContentByPolicyIdCall(apiId, operationPolicyId, _callback);

    }

    /**
     * Download an API Specific Operation Policy
     * This operation can be used to download a particular API specific operation policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public File getAPISpecificOperationPolicyContentByPolicyId(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId) throws ApiException {
        ApiResponse<File> localVarResp = getAPISpecificOperationPolicyContentByPolicyIdWithHttpInfo(apiId, operationPolicyId);
        return localVarResp.getData();
    }

    /**
     * Download an API Specific Operation Policy
     * This operation can be used to download a particular API specific operation policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAPISpecificOperationPolicyContentByPolicyIdWithHttpInfo(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getAPISpecificOperationPolicyContentByPolicyIdValidateBeforeCall(apiId, operationPolicyId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download an API Specific Operation Policy (asynchronously)
     * This operation can be used to download a particular API specific operation policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPISpecificOperationPolicyContentByPolicyIdAsync(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAPISpecificOperationPolicyContentByPolicyIdValidateBeforeCall(apiId, operationPolicyId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAPISpecificOperationPolicies
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query -Not supported yet- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAPISpecificOperationPoliciesCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable Integer limit, @jakarta.annotation.Nullable Integer offset, @jakarta.annotation.Nullable String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/operation-policies"
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAPISpecificOperationPoliciesValidateBeforeCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable Integer limit, @jakarta.annotation.Nullable Integer offset, @jakarta.annotation.Nullable String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling getAllAPISpecificOperationPolicies(Async)");
        }

        return getAllAPISpecificOperationPoliciesCall(apiId, limit, offset, query, _callback);

    }

    /**
     * Get all API specific operation policies for an API 
     * This operation provides you a list of all applicabale operation policies for an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query -Not supported yet- (optional)
     * @return OperationPolicyDataListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public OperationPolicyDataListDTO getAllAPISpecificOperationPolicies(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable Integer limit, @jakarta.annotation.Nullable Integer offset, @jakarta.annotation.Nullable String query) throws ApiException {
        ApiResponse<OperationPolicyDataListDTO> localVarResp = getAllAPISpecificOperationPoliciesWithHttpInfo(apiId, limit, offset, query);
        return localVarResp.getData();
    }

    /**
     * Get all API specific operation policies for an API 
     * This operation provides you a list of all applicabale operation policies for an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query -Not supported yet- (optional)
     * @return ApiResponse&lt;OperationPolicyDataListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationPolicyDataListDTO> getAllAPISpecificOperationPoliciesWithHttpInfo(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable Integer limit, @jakarta.annotation.Nullable Integer offset, @jakarta.annotation.Nullable String query) throws ApiException {
        okhttp3.Call localVarCall = getAllAPISpecificOperationPoliciesValidateBeforeCall(apiId, limit, offset, query, null);
        Type localVarReturnType = new TypeToken<OperationPolicyDataListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all API specific operation policies for an API  (asynchronously)
     * This operation provides you a list of all applicabale operation policies for an API 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query -Not supported yet- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAPISpecificOperationPoliciesAsync(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nullable Integer limit, @jakarta.annotation.Nullable Integer offset, @jakarta.annotation.Nullable String query, final ApiCallback<OperationPolicyDataListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAPISpecificOperationPoliciesValidateBeforeCall(apiId, limit, offset, query, _callback);
        Type localVarReturnType = new TypeToken<OperationPolicyDataListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOperationPolicyForAPIByPolicyId
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationPolicyForAPIByPolicyIdCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/operation-policies/{operationPolicyId}"
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationPolicyId" + "}", localVarApiClient.escapeString(operationPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationPolicyForAPIByPolicyIdValidateBeforeCall(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling getOperationPolicyForAPIByPolicyId(Async)");
        }

        // verify the required parameter 'operationPolicyId' is set
        if (operationPolicyId == null) {
            throw new ApiException("Missing the required parameter 'operationPolicyId' when calling getOperationPolicyForAPIByPolicyId(Async)");
        }

        return getOperationPolicyForAPIByPolicyIdCall(apiId, operationPolicyId, _callback);

    }

    /**
     * Get policy details of an API specific policy
     * This operation can be used to retrieve a particular API specific operation policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @return OperationPolicyDataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public OperationPolicyDataDTO getOperationPolicyForAPIByPolicyId(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId) throws ApiException {
        ApiResponse<OperationPolicyDataDTO> localVarResp = getOperationPolicyForAPIByPolicyIdWithHttpInfo(apiId, operationPolicyId);
        return localVarResp.getData();
    }

    /**
     * Get policy details of an API specific policy
     * This operation can be used to retrieve a particular API specific operation policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @return ApiResponse&lt;OperationPolicyDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationPolicyDataDTO> getOperationPolicyForAPIByPolicyIdWithHttpInfo(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getOperationPolicyForAPIByPolicyIdValidateBeforeCall(apiId, operationPolicyId, null);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get policy details of an API specific policy (asynchronously)
     * This operation can be used to retrieve a particular API specific operation policy. 
     * @param apiId **API ID** consisting of the **UUID** of the API.  (required)
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationPolicyForAPIByPolicyIdAsync(@jakarta.annotation.Nonnull String apiId, @jakarta.annotation.Nonnull String operationPolicyId, final ApiCallback<OperationPolicyDataDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationPolicyForAPIByPolicyIdValidateBeforeCall(apiId, operationPolicyId, _callback);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

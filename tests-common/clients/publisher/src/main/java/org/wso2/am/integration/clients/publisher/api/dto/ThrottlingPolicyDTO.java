/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.am.integration.clients.publisher.JSON;

/**
 * ThrottlingPolicyDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0-SNAPSHOT")
public class ThrottlingPolicyDTO {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @jakarta.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  /**
   * Gets or Sets policyLevel
   */
  @JsonAdapter(PolicyLevelEnum.Adapter.class)
  public enum PolicyLevelEnum {
    SUBSCRIPTION("subscription"),
    
    API("api");

    private String value;

    PolicyLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyLevelEnum fromValue(String value) {
      for (PolicyLevelEnum b : PolicyLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY_LEVEL = "policyLevel";
  @SerializedName(SERIALIZED_NAME_POLICY_LEVEL)
  @jakarta.annotation.Nullable
  private PolicyLevelEnum policyLevel;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @jakarta.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  @jakarta.annotation.Nullable
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_COUNT = "requestCount";
  @SerializedName(SERIALIZED_NAME_REQUEST_COUNT)
  @jakarta.annotation.Nonnull
  private Long requestCount;

  public static final String SERIALIZED_NAME_DATA_UNIT = "dataUnit";
  @SerializedName(SERIALIZED_NAME_DATA_UNIT)
  @jakarta.annotation.Nullable
  private String dataUnit;

  public static final String SERIALIZED_NAME_UNIT_TIME = "unitTime";
  @SerializedName(SERIALIZED_NAME_UNIT_TIME)
  @jakarta.annotation.Nonnull
  private Long unitTime;

  public static final String SERIALIZED_NAME_TIME_UNIT = "timeUnit";
  @SerializedName(SERIALIZED_NAME_TIME_UNIT)
  @jakarta.annotation.Nullable
  private String timeUnit;

  public static final String SERIALIZED_NAME_RATE_LIMIT_COUNT = "rateLimitCount";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_COUNT)
  @jakarta.annotation.Nullable
  private Integer rateLimitCount = 0;

  public static final String SERIALIZED_NAME_RATE_LIMIT_TIME_UNIT = "rateLimitTimeUnit";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_TIME_UNIT)
  @jakarta.annotation.Nullable
  private String rateLimitTimeUnit;

  /**
   * Default quota limit type
   */
  @JsonAdapter(QuotaPolicyTypeEnum.Adapter.class)
  public enum QuotaPolicyTypeEnum {
    REQUESTCOUNT("REQUESTCOUNT"),
    
    BANDWIDTHVOLUME("BANDWIDTHVOLUME");

    private String value;

    QuotaPolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuotaPolicyTypeEnum fromValue(String value) {
      for (QuotaPolicyTypeEnum b : QuotaPolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuotaPolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuotaPolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuotaPolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuotaPolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuotaPolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUOTA_POLICY_TYPE = "quotaPolicyType";
  @SerializedName(SERIALIZED_NAME_QUOTA_POLICY_TYPE)
  @jakarta.annotation.Nullable
  private QuotaPolicyTypeEnum quotaPolicyType;

  /**
   * This attribute declares whether this policy is available under commercial or free 
   */
  @JsonAdapter(TierPlanEnum.Adapter.class)
  public enum TierPlanEnum {
    FREE("FREE"),
    
    COMMERCIAL("COMMERCIAL");

    private String value;

    TierPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierPlanEnum fromValue(String value) {
      for (TierPlanEnum b : TierPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER_PLAN = "tierPlan";
  @SerializedName(SERIALIZED_NAME_TIER_PLAN)
  @jakarta.annotation.Nonnull
  private TierPlanEnum tierPlan;

  public static final String SERIALIZED_NAME_STOP_ON_QUOTA_REACH = "stopOnQuotaReach";
  @SerializedName(SERIALIZED_NAME_STOP_ON_QUOTA_REACH)
  @jakarta.annotation.Nonnull
  private Boolean stopOnQuotaReach;

  public static final String SERIALIZED_NAME_MONETIZATION_PROPERTIES = "monetizationProperties";
  @SerializedName(SERIALIZED_NAME_MONETIZATION_PROPERTIES)
  @jakarta.annotation.Nullable
  private Map<String, String> monetizationProperties = new HashMap<>();

  public ThrottlingPolicyDTO() {
  }

  public ThrottlingPolicyDTO name(@jakarta.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }


  public ThrottlingPolicyDTO description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public ThrottlingPolicyDTO policyLevel(@jakarta.annotation.Nullable PolicyLevelEnum policyLevel) {
    this.policyLevel = policyLevel;
    return this;
  }

  /**
   * Get policyLevel
   * @return policyLevel
   */
  @jakarta.annotation.Nullable
  public PolicyLevelEnum getPolicyLevel() {
    return policyLevel;
  }

  public void setPolicyLevel(@jakarta.annotation.Nullable PolicyLevelEnum policyLevel) {
    this.policyLevel = policyLevel;
  }


  public ThrottlingPolicyDTO displayName(@jakarta.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@jakarta.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public ThrottlingPolicyDTO attributes(@jakarta.annotation.Nullable Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ThrottlingPolicyDTO putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Custom attributes added to the policy policy 
   * @return attributes
   */
  @jakarta.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(@jakarta.annotation.Nullable Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public ThrottlingPolicyDTO requestCount(@jakarta.annotation.Nonnull Long requestCount) {
    this.requestCount = requestCount;
    return this;
  }

  /**
   * Maximum number of requests which can be sent within a provided unit time 
   * @return requestCount
   */
  @jakarta.annotation.Nonnull
  public Long getRequestCount() {
    return requestCount;
  }

  public void setRequestCount(@jakarta.annotation.Nonnull Long requestCount) {
    this.requestCount = requestCount;
  }


  public ThrottlingPolicyDTO dataUnit(@jakarta.annotation.Nullable String dataUnit) {
    this.dataUnit = dataUnit;
    return this;
  }

  /**
   * Unit of data allowed to be transfered. Allowed values are \&quot;KB\&quot;, \&quot;MB\&quot; and \&quot;GB\&quot; 
   * @return dataUnit
   */
  @jakarta.annotation.Nullable
  public String getDataUnit() {
    return dataUnit;
  }

  public void setDataUnit(@jakarta.annotation.Nullable String dataUnit) {
    this.dataUnit = dataUnit;
  }


  public ThrottlingPolicyDTO unitTime(@jakarta.annotation.Nonnull Long unitTime) {
    this.unitTime = unitTime;
    return this;
  }

  /**
   * Get unitTime
   * @return unitTime
   */
  @jakarta.annotation.Nonnull
  public Long getUnitTime() {
    return unitTime;
  }

  public void setUnitTime(@jakarta.annotation.Nonnull Long unitTime) {
    this.unitTime = unitTime;
  }


  public ThrottlingPolicyDTO timeUnit(@jakarta.annotation.Nullable String timeUnit) {
    this.timeUnit = timeUnit;
    return this;
  }

  /**
   * Get timeUnit
   * @return timeUnit
   */
  @jakarta.annotation.Nullable
  public String getTimeUnit() {
    return timeUnit;
  }

  public void setTimeUnit(@jakarta.annotation.Nullable String timeUnit) {
    this.timeUnit = timeUnit;
  }


  public ThrottlingPolicyDTO rateLimitCount(@jakarta.annotation.Nullable Integer rateLimitCount) {
    this.rateLimitCount = rateLimitCount;
    return this;
  }

  /**
   * Burst control request count
   * @return rateLimitCount
   */
  @jakarta.annotation.Nullable
  public Integer getRateLimitCount() {
    return rateLimitCount;
  }

  public void setRateLimitCount(@jakarta.annotation.Nullable Integer rateLimitCount) {
    this.rateLimitCount = rateLimitCount;
  }


  public ThrottlingPolicyDTO rateLimitTimeUnit(@jakarta.annotation.Nullable String rateLimitTimeUnit) {
    this.rateLimitTimeUnit = rateLimitTimeUnit;
    return this;
  }

  /**
   * Burst control time unit
   * @return rateLimitTimeUnit
   */
  @jakarta.annotation.Nullable
  public String getRateLimitTimeUnit() {
    return rateLimitTimeUnit;
  }

  public void setRateLimitTimeUnit(@jakarta.annotation.Nullable String rateLimitTimeUnit) {
    this.rateLimitTimeUnit = rateLimitTimeUnit;
  }


  public ThrottlingPolicyDTO quotaPolicyType(@jakarta.annotation.Nullable QuotaPolicyTypeEnum quotaPolicyType) {
    this.quotaPolicyType = quotaPolicyType;
    return this;
  }

  /**
   * Default quota limit type
   * @return quotaPolicyType
   */
  @jakarta.annotation.Nullable
  public QuotaPolicyTypeEnum getQuotaPolicyType() {
    return quotaPolicyType;
  }

  public void setQuotaPolicyType(@jakarta.annotation.Nullable QuotaPolicyTypeEnum quotaPolicyType) {
    this.quotaPolicyType = quotaPolicyType;
  }


  public ThrottlingPolicyDTO tierPlan(@jakarta.annotation.Nonnull TierPlanEnum tierPlan) {
    this.tierPlan = tierPlan;
    return this;
  }

  /**
   * This attribute declares whether this policy is available under commercial or free 
   * @return tierPlan
   */
  @jakarta.annotation.Nonnull
  public TierPlanEnum getTierPlan() {
    return tierPlan;
  }

  public void setTierPlan(@jakarta.annotation.Nonnull TierPlanEnum tierPlan) {
    this.tierPlan = tierPlan;
  }


  public ThrottlingPolicyDTO stopOnQuotaReach(@jakarta.annotation.Nonnull Boolean stopOnQuotaReach) {
    this.stopOnQuotaReach = stopOnQuotaReach;
    return this;
  }

  /**
   * By making this attribute to false, you are capabale of sending requests even if the request count exceeded within a unit time 
   * @return stopOnQuotaReach
   */
  @jakarta.annotation.Nonnull
  public Boolean getStopOnQuotaReach() {
    return stopOnQuotaReach;
  }

  public void setStopOnQuotaReach(@jakarta.annotation.Nonnull Boolean stopOnQuotaReach) {
    this.stopOnQuotaReach = stopOnQuotaReach;
  }


  public ThrottlingPolicyDTO monetizationProperties(@jakarta.annotation.Nullable Map<String, String> monetizationProperties) {
    this.monetizationProperties = monetizationProperties;
    return this;
  }

  public ThrottlingPolicyDTO putMonetizationPropertiesItem(String key, String monetizationPropertiesItem) {
    if (this.monetizationProperties == null) {
      this.monetizationProperties = new HashMap<>();
    }
    this.monetizationProperties.put(key, monetizationPropertiesItem);
    return this;
  }

  /**
   * Properties of a tier plan which are related to monetization
   * @return monetizationProperties
   */
  @jakarta.annotation.Nullable
  public Map<String, String> getMonetizationProperties() {
    return monetizationProperties;
  }

  public void setMonetizationProperties(@jakarta.annotation.Nullable Map<String, String> monetizationProperties) {
    this.monetizationProperties = monetizationProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThrottlingPolicyDTO throttlingPolicy = (ThrottlingPolicyDTO) o;
    return Objects.equals(this.name, throttlingPolicy.name) &&
        Objects.equals(this.description, throttlingPolicy.description) &&
        Objects.equals(this.policyLevel, throttlingPolicy.policyLevel) &&
        Objects.equals(this.displayName, throttlingPolicy.displayName) &&
        Objects.equals(this.attributes, throttlingPolicy.attributes) &&
        Objects.equals(this.requestCount, throttlingPolicy.requestCount) &&
        Objects.equals(this.dataUnit, throttlingPolicy.dataUnit) &&
        Objects.equals(this.unitTime, throttlingPolicy.unitTime) &&
        Objects.equals(this.timeUnit, throttlingPolicy.timeUnit) &&
        Objects.equals(this.rateLimitCount, throttlingPolicy.rateLimitCount) &&
        Objects.equals(this.rateLimitTimeUnit, throttlingPolicy.rateLimitTimeUnit) &&
        Objects.equals(this.quotaPolicyType, throttlingPolicy.quotaPolicyType) &&
        Objects.equals(this.tierPlan, throttlingPolicy.tierPlan) &&
        Objects.equals(this.stopOnQuotaReach, throttlingPolicy.stopOnQuotaReach) &&
        Objects.equals(this.monetizationProperties, throttlingPolicy.monetizationProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, policyLevel, displayName, attributes, requestCount, dataUnit, unitTime, timeUnit, rateLimitCount, rateLimitTimeUnit, quotaPolicyType, tierPlan, stopOnQuotaReach, monetizationProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThrottlingPolicyDTO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    policyLevel: ").append(toIndentedString(policyLevel)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    requestCount: ").append(toIndentedString(requestCount)).append("\n");
    sb.append("    dataUnit: ").append(toIndentedString(dataUnit)).append("\n");
    sb.append("    unitTime: ").append(toIndentedString(unitTime)).append("\n");
    sb.append("    timeUnit: ").append(toIndentedString(timeUnit)).append("\n");
    sb.append("    rateLimitCount: ").append(toIndentedString(rateLimitCount)).append("\n");
    sb.append("    rateLimitTimeUnit: ").append(toIndentedString(rateLimitTimeUnit)).append("\n");
    sb.append("    quotaPolicyType: ").append(toIndentedString(quotaPolicyType)).append("\n");
    sb.append("    tierPlan: ").append(toIndentedString(tierPlan)).append("\n");
    sb.append("    stopOnQuotaReach: ").append(toIndentedString(stopOnQuotaReach)).append("\n");
    sb.append("    monetizationProperties: ").append(toIndentedString(monetizationProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("policyLevel");
    openapiFields.add("displayName");
    openapiFields.add("attributes");
    openapiFields.add("requestCount");
    openapiFields.add("dataUnit");
    openapiFields.add("unitTime");
    openapiFields.add("timeUnit");
    openapiFields.add("rateLimitCount");
    openapiFields.add("rateLimitTimeUnit");
    openapiFields.add("quotaPolicyType");
    openapiFields.add("tierPlan");
    openapiFields.add("stopOnQuotaReach");
    openapiFields.add("monetizationProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("requestCount");
    openapiRequiredFields.add("unitTime");
    openapiRequiredFields.add("tierPlan");
    openapiRequiredFields.add("stopOnQuotaReach");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThrottlingPolicyDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThrottlingPolicyDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThrottlingPolicyDTO is not found in the empty JSON string", ThrottlingPolicyDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThrottlingPolicyDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThrottlingPolicyDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ThrottlingPolicyDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("policyLevel") != null && !jsonObj.get("policyLevel").isJsonNull()) && !jsonObj.get("policyLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyLevel").toString()));
      }
      // validate the optional field `policyLevel`
      if (jsonObj.get("policyLevel") != null && !jsonObj.get("policyLevel").isJsonNull()) {
        PolicyLevelEnum.validateJsonElement(jsonObj.get("policyLevel"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("dataUnit") != null && !jsonObj.get("dataUnit").isJsonNull()) && !jsonObj.get("dataUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataUnit").toString()));
      }
      if ((jsonObj.get("timeUnit") != null && !jsonObj.get("timeUnit").isJsonNull()) && !jsonObj.get("timeUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeUnit").toString()));
      }
      if ((jsonObj.get("rateLimitTimeUnit") != null && !jsonObj.get("rateLimitTimeUnit").isJsonNull()) && !jsonObj.get("rateLimitTimeUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateLimitTimeUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateLimitTimeUnit").toString()));
      }
      if ((jsonObj.get("quotaPolicyType") != null && !jsonObj.get("quotaPolicyType").isJsonNull()) && !jsonObj.get("quotaPolicyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaPolicyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaPolicyType").toString()));
      }
      // validate the optional field `quotaPolicyType`
      if (jsonObj.get("quotaPolicyType") != null && !jsonObj.get("quotaPolicyType").isJsonNull()) {
        QuotaPolicyTypeEnum.validateJsonElement(jsonObj.get("quotaPolicyType"));
      }
      if (!jsonObj.get("tierPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tierPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tierPlan").toString()));
      }
      // validate the required field `tierPlan`
      TierPlanEnum.validateJsonElement(jsonObj.get("tierPlan"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThrottlingPolicyDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThrottlingPolicyDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThrottlingPolicyDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThrottlingPolicyDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ThrottlingPolicyDTO>() {
           @Override
           public void write(JsonWriter out, ThrottlingPolicyDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThrottlingPolicyDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThrottlingPolicyDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThrottlingPolicyDTO
   * @throws IOException if the JSON string is invalid with respect to ThrottlingPolicyDTO
   */
  public static ThrottlingPolicyDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThrottlingPolicyDTO.class);
  }

  /**
   * Convert an instance of ThrottlingPolicyDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


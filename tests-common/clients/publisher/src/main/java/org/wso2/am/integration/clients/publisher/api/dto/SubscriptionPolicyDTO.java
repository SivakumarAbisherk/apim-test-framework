/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.wso2.am.integration.clients.publisher.api.dto.CustomAttributeDTO;
import org.wso2.am.integration.clients.publisher.api.dto.SubscriptionThrottlePolicyPermissionDTO;
import org.wso2.am.integration.clients.publisher.api.dto.ThrottleLimitDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.am.integration.clients.publisher.JSON;

/**
 * SubscriptionPolicyDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0-SNAPSHOT")
public class SubscriptionPolicyDTO {
  public static final String SERIALIZED_NAME_POLICY_ID = "policyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  @jakarta.annotation.Nullable
  private Integer policyId;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  @jakarta.annotation.Nullable
  private String uuid;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  @jakarta.annotation.Nullable
  private String policyName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @jakarta.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_IS_DEPLOYED = "isDeployed";
  @SerializedName(SERIALIZED_NAME_IS_DEPLOYED)
  @jakarta.annotation.Nullable
  private Boolean isDeployed = false;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  @jakarta.annotation.Nullable
  private Integer tenantId;

  public static final String SERIALIZED_NAME_TENANT_DOMAIN = "tenantDomain";
  @SerializedName(SERIALIZED_NAME_TENANT_DOMAIN)
  @jakarta.annotation.Nullable
  private String tenantDomain;

  public static final String SERIALIZED_NAME_DEFAULT_LIMIT = "defaultLimit";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LIMIT)
  @jakarta.annotation.Nonnull
  private ThrottleLimitDTO defaultLimit;

  public static final String SERIALIZED_NAME_RATE_LIMIT_COUNT = "rateLimitCount";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_COUNT)
  @jakarta.annotation.Nullable
  private Integer rateLimitCount;

  public static final String SERIALIZED_NAME_RATE_LIMIT_TIME_UNIT = "rateLimitTimeUnit";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_TIME_UNIT)
  @jakarta.annotation.Nullable
  private String rateLimitTimeUnit;

  public static final String SERIALIZED_NAME_SUBSCRIBER_COUNT = "subscriberCount";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_COUNT)
  @jakarta.annotation.Nullable
  private Integer subscriberCount;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  @jakarta.annotation.Nullable
  private List<CustomAttributeDTO> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOP_ON_QUOTA_REACH = "stopOnQuotaReach";
  @SerializedName(SERIALIZED_NAME_STOP_ON_QUOTA_REACH)
  @jakarta.annotation.Nullable
  private Boolean stopOnQuotaReach = false;

  public static final String SERIALIZED_NAME_BILLING_PLAN = "billingPlan";
  @SerializedName(SERIALIZED_NAME_BILLING_PLAN)
  @jakarta.annotation.Nullable
  private String billingPlan;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  @jakarta.annotation.Nullable
  private SubscriptionThrottlePolicyPermissionDTO permissions;

  public SubscriptionPolicyDTO() {
  }

  public SubscriptionPolicyDTO policyId(@jakarta.annotation.Nullable Integer policyId) {
    this.policyId = policyId;
    return this;
  }

  /**
   * Id of policy
   * @return policyId
   */
  @jakarta.annotation.Nullable
  public Integer getPolicyId() {
    return policyId;
  }

  public void setPolicyId(@jakarta.annotation.Nullable Integer policyId) {
    this.policyId = policyId;
  }


  public SubscriptionPolicyDTO uuid(@jakarta.annotation.Nullable String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * policy uuid
   * @return uuid
   */
  @jakarta.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(@jakarta.annotation.Nullable String uuid) {
    this.uuid = uuid;
  }


  public SubscriptionPolicyDTO policyName(@jakarta.annotation.Nullable String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * Name of policy
   * @return policyName
   */
  @jakarta.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(@jakarta.annotation.Nullable String policyName) {
    this.policyName = policyName;
  }


  public SubscriptionPolicyDTO displayName(@jakarta.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the policy
   * @return displayName
   */
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@jakarta.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public SubscriptionPolicyDTO description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the policy
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public SubscriptionPolicyDTO isDeployed(@jakarta.annotation.Nullable Boolean isDeployed) {
    this.isDeployed = isDeployed;
    return this;
  }

  /**
   * Indicates whether the policy is deployed successfully or not.
   * @return isDeployed
   */
  @jakarta.annotation.Nullable
  public Boolean getIsDeployed() {
    return isDeployed;
  }

  public void setIsDeployed(@jakarta.annotation.Nullable Boolean isDeployed) {
    this.isDeployed = isDeployed;
  }


  public SubscriptionPolicyDTO tenantId(@jakarta.annotation.Nullable Integer tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Throttling policy tenant domain id
   * @return tenantId
   */
  @jakarta.annotation.Nullable
  public Integer getTenantId() {
    return tenantId;
  }

  public void setTenantId(@jakarta.annotation.Nullable Integer tenantId) {
    this.tenantId = tenantId;
  }


  public SubscriptionPolicyDTO tenantDomain(@jakarta.annotation.Nullable String tenantDomain) {
    this.tenantDomain = tenantDomain;
    return this;
  }

  /**
   * Throttling policy tenant domain
   * @return tenantDomain
   */
  @jakarta.annotation.Nullable
  public String getTenantDomain() {
    return tenantDomain;
  }

  public void setTenantDomain(@jakarta.annotation.Nullable String tenantDomain) {
    this.tenantDomain = tenantDomain;
  }


  public SubscriptionPolicyDTO defaultLimit(@jakarta.annotation.Nonnull ThrottleLimitDTO defaultLimit) {
    this.defaultLimit = defaultLimit;
    return this;
  }

  /**
   * Get defaultLimit
   * @return defaultLimit
   */
  @jakarta.annotation.Nonnull
  public ThrottleLimitDTO getDefaultLimit() {
    return defaultLimit;
  }

  public void setDefaultLimit(@jakarta.annotation.Nonnull ThrottleLimitDTO defaultLimit) {
    this.defaultLimit = defaultLimit;
  }


  public SubscriptionPolicyDTO rateLimitCount(@jakarta.annotation.Nullable Integer rateLimitCount) {
    this.rateLimitCount = rateLimitCount;
    return this;
  }

  /**
   * Burst control request count
   * @return rateLimitCount
   */
  @jakarta.annotation.Nullable
  public Integer getRateLimitCount() {
    return rateLimitCount;
  }

  public void setRateLimitCount(@jakarta.annotation.Nullable Integer rateLimitCount) {
    this.rateLimitCount = rateLimitCount;
  }


  public SubscriptionPolicyDTO rateLimitTimeUnit(@jakarta.annotation.Nullable String rateLimitTimeUnit) {
    this.rateLimitTimeUnit = rateLimitTimeUnit;
    return this;
  }

  /**
   * Burst control time unit
   * @return rateLimitTimeUnit
   */
  @jakarta.annotation.Nullable
  public String getRateLimitTimeUnit() {
    return rateLimitTimeUnit;
  }

  public void setRateLimitTimeUnit(@jakarta.annotation.Nullable String rateLimitTimeUnit) {
    this.rateLimitTimeUnit = rateLimitTimeUnit;
  }


  public SubscriptionPolicyDTO subscriberCount(@jakarta.annotation.Nullable Integer subscriberCount) {
    this.subscriberCount = subscriberCount;
    return this;
  }

  /**
   * Number of subscriptions allowed
   * @return subscriberCount
   */
  @jakarta.annotation.Nullable
  public Integer getSubscriberCount() {
    return subscriberCount;
  }

  public void setSubscriberCount(@jakarta.annotation.Nullable Integer subscriberCount) {
    this.subscriberCount = subscriberCount;
  }


  public SubscriptionPolicyDTO customAttributes(@jakarta.annotation.Nullable List<CustomAttributeDTO> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public SubscriptionPolicyDTO addCustomAttributesItem(CustomAttributeDTO customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * Custom attributes added to the Subscription Throttling Policy 
   * @return customAttributes
   */
  @jakarta.annotation.Nullable
  public List<CustomAttributeDTO> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(@jakarta.annotation.Nullable List<CustomAttributeDTO> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public SubscriptionPolicyDTO stopOnQuotaReach(@jakarta.annotation.Nullable Boolean stopOnQuotaReach) {
    this.stopOnQuotaReach = stopOnQuotaReach;
    return this;
  }

  /**
   * This indicates the action to be taken when a user goes beyond the allocated quota. If checked, the user&#39;s requests will be dropped. If unchecked, the requests will be allowed to pass through. 
   * @return stopOnQuotaReach
   */
  @jakarta.annotation.Nullable
  public Boolean getStopOnQuotaReach() {
    return stopOnQuotaReach;
  }

  public void setStopOnQuotaReach(@jakarta.annotation.Nullable Boolean stopOnQuotaReach) {
    this.stopOnQuotaReach = stopOnQuotaReach;
  }


  public SubscriptionPolicyDTO billingPlan(@jakarta.annotation.Nullable String billingPlan) {
    this.billingPlan = billingPlan;
    return this;
  }

  /**
   * define whether this is Paid or a Free plan. Allowed values are FREE or COMMERCIAL. 
   * @return billingPlan
   */
  @jakarta.annotation.Nullable
  public String getBillingPlan() {
    return billingPlan;
  }

  public void setBillingPlan(@jakarta.annotation.Nullable String billingPlan) {
    this.billingPlan = billingPlan;
  }


  public SubscriptionPolicyDTO permissions(@jakarta.annotation.Nullable SubscriptionThrottlePolicyPermissionDTO permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @jakarta.annotation.Nullable
  public SubscriptionThrottlePolicyPermissionDTO getPermissions() {
    return permissions;
  }

  public void setPermissions(@jakarta.annotation.Nullable SubscriptionThrottlePolicyPermissionDTO permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPolicyDTO subscriptionPolicy = (SubscriptionPolicyDTO) o;
    return Objects.equals(this.policyId, subscriptionPolicy.policyId) &&
        Objects.equals(this.uuid, subscriptionPolicy.uuid) &&
        Objects.equals(this.policyName, subscriptionPolicy.policyName) &&
        Objects.equals(this.displayName, subscriptionPolicy.displayName) &&
        Objects.equals(this.description, subscriptionPolicy.description) &&
        Objects.equals(this.isDeployed, subscriptionPolicy.isDeployed) &&
        Objects.equals(this.tenantId, subscriptionPolicy.tenantId) &&
        Objects.equals(this.tenantDomain, subscriptionPolicy.tenantDomain) &&
        Objects.equals(this.defaultLimit, subscriptionPolicy.defaultLimit) &&
        Objects.equals(this.rateLimitCount, subscriptionPolicy.rateLimitCount) &&
        Objects.equals(this.rateLimitTimeUnit, subscriptionPolicy.rateLimitTimeUnit) &&
        Objects.equals(this.subscriberCount, subscriptionPolicy.subscriberCount) &&
        Objects.equals(this.customAttributes, subscriptionPolicy.customAttributes) &&
        Objects.equals(this.stopOnQuotaReach, subscriptionPolicy.stopOnQuotaReach) &&
        Objects.equals(this.billingPlan, subscriptionPolicy.billingPlan) &&
        Objects.equals(this.permissions, subscriptionPolicy.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyId, uuid, policyName, displayName, description, isDeployed, tenantId, tenantDomain, defaultLimit, rateLimitCount, rateLimitTimeUnit, subscriberCount, customAttributes, stopOnQuotaReach, billingPlan, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPolicyDTO {\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDeployed: ").append(toIndentedString(isDeployed)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantDomain: ").append(toIndentedString(tenantDomain)).append("\n");
    sb.append("    defaultLimit: ").append(toIndentedString(defaultLimit)).append("\n");
    sb.append("    rateLimitCount: ").append(toIndentedString(rateLimitCount)).append("\n");
    sb.append("    rateLimitTimeUnit: ").append(toIndentedString(rateLimitTimeUnit)).append("\n");
    sb.append("    subscriberCount: ").append(toIndentedString(subscriberCount)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    stopOnQuotaReach: ").append(toIndentedString(stopOnQuotaReach)).append("\n");
    sb.append("    billingPlan: ").append(toIndentedString(billingPlan)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyId");
    openapiFields.add("uuid");
    openapiFields.add("policyName");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("isDeployed");
    openapiFields.add("tenantId");
    openapiFields.add("tenantDomain");
    openapiFields.add("defaultLimit");
    openapiFields.add("rateLimitCount");
    openapiFields.add("rateLimitTimeUnit");
    openapiFields.add("subscriberCount");
    openapiFields.add("customAttributes");
    openapiFields.add("stopOnQuotaReach");
    openapiFields.add("billingPlan");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultLimit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPolicyDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPolicyDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPolicyDTO is not found in the empty JSON string", SubscriptionPolicyDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPolicyDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPolicyDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionPolicyDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) && !jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("tenantDomain") != null && !jsonObj.get("tenantDomain").isJsonNull()) && !jsonObj.get("tenantDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantDomain").toString()));
      }
      // validate the required field `defaultLimit`
      ThrottleLimitDTO.validateJsonElement(jsonObj.get("defaultLimit"));
      if ((jsonObj.get("rateLimitTimeUnit") != null && !jsonObj.get("rateLimitTimeUnit").isJsonNull()) && !jsonObj.get("rateLimitTimeUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateLimitTimeUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateLimitTimeUnit").toString()));
      }
      if (jsonObj.get("customAttributes") != null && !jsonObj.get("customAttributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("customAttributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("customAttributes").toString()));
          }

          // validate the optional field `customAttributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            CustomAttributeDTO.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("billingPlan") != null && !jsonObj.get("billingPlan").isJsonNull()) && !jsonObj.get("billingPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPlan").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        SubscriptionThrottlePolicyPermissionDTO.validateJsonElement(jsonObj.get("permissions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPolicyDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPolicyDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPolicyDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPolicyDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPolicyDTO>() {
           @Override
           public void write(JsonWriter out, SubscriptionPolicyDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPolicyDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPolicyDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPolicyDTO
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPolicyDTO
   */
  public static SubscriptionPolicyDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPolicyDTO.class);
  }

  /**
   * Convert an instance of SubscriptionPolicyDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


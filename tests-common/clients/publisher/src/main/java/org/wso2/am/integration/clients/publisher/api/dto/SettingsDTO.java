/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.wso2.am.integration.clients.publisher.api.dto.EnvironmentDTO;
import org.wso2.am.integration.clients.publisher.api.dto.MonetizationAttributeDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.am.integration.clients.publisher.JSON;

/**
 * SettingsDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0-SNAPSHOT")
public class SettingsDTO {
  public static final String SERIALIZED_NAME_DEVPORTAL_URL = "devportalUrl";
  @SerializedName(SERIALIZED_NAME_DEVPORTAL_URL)
  @jakarta.annotation.Nullable
  private String devportalUrl;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  @jakarta.annotation.Nullable
  private List<EnvironmentDTO> environment = new ArrayList<>();

  public static final String SERIALIZED_NAME_GATEWAY_TYPES = "gatewayTypes";
  @SerializedName(SERIALIZED_NAME_GATEWAY_TYPES)
  @jakarta.annotation.Nullable
  private List<String> gatewayTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  @jakarta.annotation.Nullable
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONETIZATION_ATTRIBUTES = "monetizationAttributes";
  @SerializedName(SERIALIZED_NAME_MONETIZATION_ATTRIBUTES)
  @jakarta.annotation.Nullable
  private List<MonetizationAttributeDTO> monetizationAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY_AUDIT_PROPERTIES = "securityAuditProperties";
  @SerializedName(SERIALIZED_NAME_SECURITY_AUDIT_PROPERTIES)
  @jakarta.annotation.Nullable
  private Object securityAuditProperties;

  public static final String SERIALIZED_NAME_EXTERNAL_STORES_ENABLED = "externalStoresEnabled";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_STORES_ENABLED)
  @jakarta.annotation.Nullable
  private Boolean externalStoresEnabled;

  public static final String SERIALIZED_NAME_DOC_VISIBILITY_ENABLED = "docVisibilityEnabled";
  @SerializedName(SERIALIZED_NAME_DOC_VISIBILITY_ENABLED)
  @jakarta.annotation.Nullable
  private Boolean docVisibilityEnabled;

  public static final String SERIALIZED_NAME_CROSS_TENANT_SUBSCRIPTION_ENABLED = "crossTenantSubscriptionEnabled";
  @SerializedName(SERIALIZED_NAME_CROSS_TENANT_SUBSCRIPTION_ENABLED)
  @jakarta.annotation.Nullable
  private Boolean crossTenantSubscriptionEnabled = false;

  public static final String SERIALIZED_NAME_DEFAULT_ADVANCE_POLICY = "defaultAdvancePolicy";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ADVANCE_POLICY)
  @jakarta.annotation.Nullable
  private String defaultAdvancePolicy;

  public static final String SERIALIZED_NAME_DEFAULT_SUBSCRIPTION_POLICY = "defaultSubscriptionPolicy";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SUBSCRIPTION_POLICY)
  @jakarta.annotation.Nullable
  private String defaultSubscriptionPolicy;

  public static final String SERIALIZED_NAME_AUTHORIZATION_HEADER = "authorizationHeader";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_HEADER)
  @jakarta.annotation.Nullable
  private String authorizationHeader;

  public SettingsDTO() {
  }

  public SettingsDTO devportalUrl(@jakarta.annotation.Nullable String devportalUrl) {
    this.devportalUrl = devportalUrl;
    return this;
  }

  /**
   * The Developer Portal URL
   * @return devportalUrl
   */
  @jakarta.annotation.Nullable
  public String getDevportalUrl() {
    return devportalUrl;
  }

  public void setDevportalUrl(@jakarta.annotation.Nullable String devportalUrl) {
    this.devportalUrl = devportalUrl;
  }


  public SettingsDTO environment(@jakarta.annotation.Nullable List<EnvironmentDTO> environment) {
    this.environment = environment;
    return this;
  }

  public SettingsDTO addEnvironmentItem(EnvironmentDTO environmentItem) {
    if (this.environment == null) {
      this.environment = new ArrayList<>();
    }
    this.environment.add(environmentItem);
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @jakarta.annotation.Nullable
  public List<EnvironmentDTO> getEnvironment() {
    return environment;
  }

  public void setEnvironment(@jakarta.annotation.Nullable List<EnvironmentDTO> environment) {
    this.environment = environment;
  }


  public SettingsDTO gatewayTypes(@jakarta.annotation.Nullable List<String> gatewayTypes) {
    this.gatewayTypes = gatewayTypes;
    return this;
  }

  public SettingsDTO addGatewayTypesItem(String gatewayTypesItem) {
    if (this.gatewayTypes == null) {
      this.gatewayTypes = new ArrayList<>();
    }
    this.gatewayTypes.add(gatewayTypesItem);
    return this;
  }

  /**
   * Get gatewayTypes
   * @return gatewayTypes
   */
  @jakarta.annotation.Nullable
  public List<String> getGatewayTypes() {
    return gatewayTypes;
  }

  public void setGatewayTypes(@jakarta.annotation.Nullable List<String> gatewayTypes) {
    this.gatewayTypes = gatewayTypes;
  }


  public SettingsDTO scopes(@jakarta.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public SettingsDTO addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @jakarta.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(@jakarta.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
  }


  public SettingsDTO monetizationAttributes(@jakarta.annotation.Nullable List<MonetizationAttributeDTO> monetizationAttributes) {
    this.monetizationAttributes = monetizationAttributes;
    return this;
  }

  public SettingsDTO addMonetizationAttributesItem(MonetizationAttributeDTO monetizationAttributesItem) {
    if (this.monetizationAttributes == null) {
      this.monetizationAttributes = new ArrayList<>();
    }
    this.monetizationAttributes.add(monetizationAttributesItem);
    return this;
  }

  /**
   * Get monetizationAttributes
   * @return monetizationAttributes
   */
  @jakarta.annotation.Nullable
  public List<MonetizationAttributeDTO> getMonetizationAttributes() {
    return monetizationAttributes;
  }

  public void setMonetizationAttributes(@jakarta.annotation.Nullable List<MonetizationAttributeDTO> monetizationAttributes) {
    this.monetizationAttributes = monetizationAttributes;
  }


  public SettingsDTO securityAuditProperties(@jakarta.annotation.Nullable Object securityAuditProperties) {
    this.securityAuditProperties = securityAuditProperties;
    return this;
  }

  /**
   * Get securityAuditProperties
   * @return securityAuditProperties
   */
  @jakarta.annotation.Nullable
  public Object getSecurityAuditProperties() {
    return securityAuditProperties;
  }

  public void setSecurityAuditProperties(@jakarta.annotation.Nullable Object securityAuditProperties) {
    this.securityAuditProperties = securityAuditProperties;
  }


  public SettingsDTO externalStoresEnabled(@jakarta.annotation.Nullable Boolean externalStoresEnabled) {
    this.externalStoresEnabled = externalStoresEnabled;
    return this;
  }

  /**
   * Is External Stores configuration enabled 
   * @return externalStoresEnabled
   */
  @jakarta.annotation.Nullable
  public Boolean getExternalStoresEnabled() {
    return externalStoresEnabled;
  }

  public void setExternalStoresEnabled(@jakarta.annotation.Nullable Boolean externalStoresEnabled) {
    this.externalStoresEnabled = externalStoresEnabled;
  }


  public SettingsDTO docVisibilityEnabled(@jakarta.annotation.Nullable Boolean docVisibilityEnabled) {
    this.docVisibilityEnabled = docVisibilityEnabled;
    return this;
  }

  /**
   * Is Document Visibility configuration enabled 
   * @return docVisibilityEnabled
   */
  @jakarta.annotation.Nullable
  public Boolean getDocVisibilityEnabled() {
    return docVisibilityEnabled;
  }

  public void setDocVisibilityEnabled(@jakarta.annotation.Nullable Boolean docVisibilityEnabled) {
    this.docVisibilityEnabled = docVisibilityEnabled;
  }


  public SettingsDTO crossTenantSubscriptionEnabled(@jakarta.annotation.Nullable Boolean crossTenantSubscriptionEnabled) {
    this.crossTenantSubscriptionEnabled = crossTenantSubscriptionEnabled;
    return this;
  }

  /**
   * Is Cross Tenant Subscriptions Enabled 
   * @return crossTenantSubscriptionEnabled
   */
  @jakarta.annotation.Nullable
  public Boolean getCrossTenantSubscriptionEnabled() {
    return crossTenantSubscriptionEnabled;
  }

  public void setCrossTenantSubscriptionEnabled(@jakarta.annotation.Nullable Boolean crossTenantSubscriptionEnabled) {
    this.crossTenantSubscriptionEnabled = crossTenantSubscriptionEnabled;
  }


  public SettingsDTO defaultAdvancePolicy(@jakarta.annotation.Nullable String defaultAdvancePolicy) {
    this.defaultAdvancePolicy = defaultAdvancePolicy;
    return this;
  }

  /**
   * Default Advance Policy.
   * @return defaultAdvancePolicy
   */
  @jakarta.annotation.Nullable
  public String getDefaultAdvancePolicy() {
    return defaultAdvancePolicy;
  }

  public void setDefaultAdvancePolicy(@jakarta.annotation.Nullable String defaultAdvancePolicy) {
    this.defaultAdvancePolicy = defaultAdvancePolicy;
  }


  public SettingsDTO defaultSubscriptionPolicy(@jakarta.annotation.Nullable String defaultSubscriptionPolicy) {
    this.defaultSubscriptionPolicy = defaultSubscriptionPolicy;
    return this;
  }

  /**
   * Default Subscription Policy.
   * @return defaultSubscriptionPolicy
   */
  @jakarta.annotation.Nullable
  public String getDefaultSubscriptionPolicy() {
    return defaultSubscriptionPolicy;
  }

  public void setDefaultSubscriptionPolicy(@jakarta.annotation.Nullable String defaultSubscriptionPolicy) {
    this.defaultSubscriptionPolicy = defaultSubscriptionPolicy;
  }


  public SettingsDTO authorizationHeader(@jakarta.annotation.Nullable String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
    return this;
  }

  /**
   * Authorization Header
   * @return authorizationHeader
   */
  @jakarta.annotation.Nullable
  public String getAuthorizationHeader() {
    return authorizationHeader;
  }

  public void setAuthorizationHeader(@jakarta.annotation.Nullable String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsDTO settings = (SettingsDTO) o;
    return Objects.equals(this.devportalUrl, settings.devportalUrl) &&
        Objects.equals(this.environment, settings.environment) &&
        Objects.equals(this.gatewayTypes, settings.gatewayTypes) &&
        Objects.equals(this.scopes, settings.scopes) &&
        Objects.equals(this.monetizationAttributes, settings.monetizationAttributes) &&
        Objects.equals(this.securityAuditProperties, settings.securityAuditProperties) &&
        Objects.equals(this.externalStoresEnabled, settings.externalStoresEnabled) &&
        Objects.equals(this.docVisibilityEnabled, settings.docVisibilityEnabled) &&
        Objects.equals(this.crossTenantSubscriptionEnabled, settings.crossTenantSubscriptionEnabled) &&
        Objects.equals(this.defaultAdvancePolicy, settings.defaultAdvancePolicy) &&
        Objects.equals(this.defaultSubscriptionPolicy, settings.defaultSubscriptionPolicy) &&
        Objects.equals(this.authorizationHeader, settings.authorizationHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(devportalUrl, environment, gatewayTypes, scopes, monetizationAttributes, securityAuditProperties, externalStoresEnabled, docVisibilityEnabled, crossTenantSubscriptionEnabled, defaultAdvancePolicy, defaultSubscriptionPolicy, authorizationHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsDTO {\n");
    sb.append("    devportalUrl: ").append(toIndentedString(devportalUrl)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    gatewayTypes: ").append(toIndentedString(gatewayTypes)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    monetizationAttributes: ").append(toIndentedString(monetizationAttributes)).append("\n");
    sb.append("    securityAuditProperties: ").append(toIndentedString(securityAuditProperties)).append("\n");
    sb.append("    externalStoresEnabled: ").append(toIndentedString(externalStoresEnabled)).append("\n");
    sb.append("    docVisibilityEnabled: ").append(toIndentedString(docVisibilityEnabled)).append("\n");
    sb.append("    crossTenantSubscriptionEnabled: ").append(toIndentedString(crossTenantSubscriptionEnabled)).append("\n");
    sb.append("    defaultAdvancePolicy: ").append(toIndentedString(defaultAdvancePolicy)).append("\n");
    sb.append("    defaultSubscriptionPolicy: ").append(toIndentedString(defaultSubscriptionPolicy)).append("\n");
    sb.append("    authorizationHeader: ").append(toIndentedString(authorizationHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("devportalUrl");
    openapiFields.add("environment");
    openapiFields.add("gatewayTypes");
    openapiFields.add("scopes");
    openapiFields.add("monetizationAttributes");
    openapiFields.add("securityAuditProperties");
    openapiFields.add("externalStoresEnabled");
    openapiFields.add("docVisibilityEnabled");
    openapiFields.add("crossTenantSubscriptionEnabled");
    openapiFields.add("defaultAdvancePolicy");
    openapiFields.add("defaultSubscriptionPolicy");
    openapiFields.add("authorizationHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SettingsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettingsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettingsDTO is not found in the empty JSON string", SettingsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SettingsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SettingsDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("devportalUrl") != null && !jsonObj.get("devportalUrl").isJsonNull()) && !jsonObj.get("devportalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devportalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devportalUrl").toString()));
      }
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        JsonArray jsonArrayenvironment = jsonObj.getAsJsonArray("environment");
        if (jsonArrayenvironment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environment` to be an array in the JSON string but got `%s`", jsonObj.get("environment").toString()));
          }

          // validate the optional field `environment` (array)
          for (int i = 0; i < jsonArrayenvironment.size(); i++) {
            EnvironmentDTO.validateJsonElement(jsonArrayenvironment.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gatewayTypes") != null && !jsonObj.get("gatewayTypes").isJsonNull() && !jsonObj.get("gatewayTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayTypes` to be an array in the JSON string but got `%s`", jsonObj.get("gatewayTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if (jsonObj.get("monetizationAttributes") != null && !jsonObj.get("monetizationAttributes").isJsonNull()) {
        JsonArray jsonArraymonetizationAttributes = jsonObj.getAsJsonArray("monetizationAttributes");
        if (jsonArraymonetizationAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monetizationAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monetizationAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("monetizationAttributes").toString()));
          }

          // validate the optional field `monetizationAttributes` (array)
          for (int i = 0; i < jsonArraymonetizationAttributes.size(); i++) {
            MonetizationAttributeDTO.validateJsonElement(jsonArraymonetizationAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("defaultAdvancePolicy") != null && !jsonObj.get("defaultAdvancePolicy").isJsonNull()) && !jsonObj.get("defaultAdvancePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAdvancePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAdvancePolicy").toString()));
      }
      if ((jsonObj.get("defaultSubscriptionPolicy") != null && !jsonObj.get("defaultSubscriptionPolicy").isJsonNull()) && !jsonObj.get("defaultSubscriptionPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSubscriptionPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSubscriptionPolicy").toString()));
      }
      if ((jsonObj.get("authorizationHeader") != null && !jsonObj.get("authorizationHeader").isJsonNull()) && !jsonObj.get("authorizationHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationHeader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettingsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettingsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettingsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettingsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<SettingsDTO>() {
           @Override
           public void write(JsonWriter out, SettingsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettingsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SettingsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SettingsDTO
   * @throws IOException if the JSON string is invalid with respect to SettingsDTO
   */
  public static SettingsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettingsDTO.class);
  }

  /**
   * Convert an instance of SettingsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.wso2.am.integration.clients.publisher.api.dto.SearchResultDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.am.integration.clients.publisher.JSON;

/**
 * APISearchResultDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0-SNAPSHOT")
public class APISearchResultDTO extends SearchResultDTO {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @jakarta.annotation.Nullable
  private String context;

  public static final String SERIALIZED_NAME_CONTEXT_TEMPLATE = "contextTemplate";
  @SerializedName(SERIALIZED_NAME_CONTEXT_TEMPLATE)
  @jakarta.annotation.Nullable
  private String contextTemplate;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @jakarta.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  @jakarta.annotation.Nullable
  private String provider;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @jakarta.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_THUMBNAIL_URI = "thumbnailUri";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URI)
  @jakarta.annotation.Nullable
  private String thumbnailUri;

  public static final String SERIALIZED_NAME_ADVERTISE_ONLY = "advertiseOnly";
  @SerializedName(SERIALIZED_NAME_ADVERTISE_ONLY)
  @jakarta.annotation.Nullable
  private Boolean advertiseOnly;

  public APISearchResultDTO() {
    this.name = this.getClass().getSimpleName();
  }

  public APISearchResultDTO description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief description about the API
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public APISearchResultDTO context(@jakarta.annotation.Nullable String context) {
    this.context = context;
    return this;
  }

  /**
   * A string that represents the context of the user&#39;s request
   * @return context
   */
  @jakarta.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(@jakarta.annotation.Nullable String context) {
    this.context = context;
  }


  public APISearchResultDTO contextTemplate(@jakarta.annotation.Nullable String contextTemplate) {
    this.contextTemplate = contextTemplate;
    return this;
  }

  /**
   * The templated context of the API
   * @return contextTemplate
   */
  @jakarta.annotation.Nullable
  public String getContextTemplate() {
    return contextTemplate;
  }

  public void setContextTemplate(@jakarta.annotation.Nullable String contextTemplate) {
    this.contextTemplate = contextTemplate;
  }


  public APISearchResultDTO version(@jakarta.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the API
   * @return version
   */
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@jakarta.annotation.Nullable String version) {
    this.version = version;
  }


  public APISearchResultDTO provider(@jakarta.annotation.Nullable String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * If the provider value is not given, the user invoking the API will be used as the provider. 
   * @return provider
   */
  @jakarta.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(@jakarta.annotation.Nullable String provider) {
    this.provider = provider;
  }


  public APISearchResultDTO status(@jakarta.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * This describes in which status of the lifecycle the API is
   * @return status
   */
  @jakarta.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@jakarta.annotation.Nullable String status) {
    this.status = status;
  }


  public APISearchResultDTO thumbnailUri(@jakarta.annotation.Nullable String thumbnailUri) {
    this.thumbnailUri = thumbnailUri;
    return this;
  }

  /**
   * Get thumbnailUri
   * @return thumbnailUri
   */
  @jakarta.annotation.Nullable
  public String getThumbnailUri() {
    return thumbnailUri;
  }

  public void setThumbnailUri(@jakarta.annotation.Nullable String thumbnailUri) {
    this.thumbnailUri = thumbnailUri;
  }


  public APISearchResultDTO advertiseOnly(@jakarta.annotation.Nullable Boolean advertiseOnly) {
    this.advertiseOnly = advertiseOnly;
    return this;
  }

  /**
   * Get advertiseOnly
   * @return advertiseOnly
   */
  @jakarta.annotation.Nullable
  public Boolean getAdvertiseOnly() {
    return advertiseOnly;
  }

  public void setAdvertiseOnly(@jakarta.annotation.Nullable Boolean advertiseOnly) {
    this.advertiseOnly = advertiseOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APISearchResultDTO apISearchResult = (APISearchResultDTO) o;
    return Objects.equals(this.description, apISearchResult.description) &&
        Objects.equals(this.context, apISearchResult.context) &&
        Objects.equals(this.contextTemplate, apISearchResult.contextTemplate) &&
        Objects.equals(this.version, apISearchResult.version) &&
        Objects.equals(this.provider, apISearchResult.provider) &&
        Objects.equals(this.status, apISearchResult.status) &&
        Objects.equals(this.thumbnailUri, apISearchResult.thumbnailUri) &&
        Objects.equals(this.advertiseOnly, apISearchResult.advertiseOnly) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, context, contextTemplate, version, provider, status, thumbnailUri, advertiseOnly, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APISearchResultDTO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    contextTemplate: ").append(toIndentedString(contextTemplate)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    thumbnailUri: ").append(toIndentedString(thumbnailUri)).append("\n");
    sb.append("    advertiseOnly: ").append(toIndentedString(advertiseOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("transportType");
    openapiFields.add("description");
    openapiFields.add("context");
    openapiFields.add("contextTemplate");
    openapiFields.add("version");
    openapiFields.add("provider");
    openapiFields.add("status");
    openapiFields.add("thumbnailUri");
    openapiFields.add("advertiseOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APISearchResultDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APISearchResultDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APISearchResultDTO is not found in the empty JSON string", APISearchResultDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APISearchResultDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APISearchResultDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APISearchResultDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APISearchResultDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APISearchResultDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APISearchResultDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APISearchResultDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<APISearchResultDTO>() {
           @Override
           public void write(JsonWriter out, APISearchResultDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APISearchResultDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APISearchResultDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APISearchResultDTO
   * @throws IOException if the JSON string is invalid with respect to APISearchResultDTO
   */
  public static APISearchResultDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APISearchResultDTO.class);
  }

  /**
   * Convert an instance of APISearchResultDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


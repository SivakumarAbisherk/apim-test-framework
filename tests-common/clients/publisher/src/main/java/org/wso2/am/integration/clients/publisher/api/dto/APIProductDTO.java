/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.wso2.am.integration.clients.publisher.api.dto.APICorsConfigurationDTO;
import org.wso2.am.integration.clients.publisher.api.dto.APIInfoAdditionalPropertiesInnerDTO;
import org.wso2.am.integration.clients.publisher.api.dto.APIInfoAdditionalPropertiesMapValueDTO;
import org.wso2.am.integration.clients.publisher.api.dto.APIMonetizationInfoDTO;
import org.wso2.am.integration.clients.publisher.api.dto.APIProductBusinessInformationDTO;
import org.wso2.am.integration.clients.publisher.api.dto.APIScopeDTO;
import org.wso2.am.integration.clients.publisher.api.dto.ProductAPIDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.am.integration.clients.publisher.JSON;

/**
 * APIProductDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0-SNAPSHOT")
public class APIProductDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @jakarta.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @jakarta.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @jakarta.annotation.Nullable
  private String context;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @jakarta.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  @jakarta.annotation.Nullable
  private String provider;

  public static final String SERIALIZED_NAME_HAS_THUMBNAIL = "hasThumbnail";
  @SerializedName(SERIALIZED_NAME_HAS_THUMBNAIL)
  @jakarta.annotation.Nullable
  private Boolean hasThumbnail;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @jakarta.annotation.Nullable
  private String state = "CREATED";

  public static final String SERIALIZED_NAME_ENABLE_SCHEMA_VALIDATION = "enableSchemaValidation";
  @SerializedName(SERIALIZED_NAME_ENABLE_SCHEMA_VALIDATION)
  @jakarta.annotation.Nullable
  private Boolean enableSchemaValidation;

  public static final String SERIALIZED_NAME_IS_DEFAULT_VERSION = "isDefaultVersion";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_VERSION)
  @jakarta.annotation.Nullable
  private Boolean isDefaultVersion;

  public static final String SERIALIZED_NAME_IS_REVISION = "isRevision";
  @SerializedName(SERIALIZED_NAME_IS_REVISION)
  @jakarta.annotation.Nullable
  private Boolean isRevision;

  public static final String SERIALIZED_NAME_REVISIONED_API_PRODUCT_ID = "revisionedApiProductId";
  @SerializedName(SERIALIZED_NAME_REVISIONED_API_PRODUCT_ID)
  @jakarta.annotation.Nullable
  private String revisionedApiProductId;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  @jakarta.annotation.Nullable
  private Integer revisionId;

  public static final String SERIALIZED_NAME_RESPONSE_CACHING_ENABLED = "responseCachingEnabled";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CACHING_ENABLED)
  @jakarta.annotation.Nullable
  private Boolean responseCachingEnabled;

  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cacheTimeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  @jakarta.annotation.Nullable
  private Integer cacheTimeout;

  /**
   * The visibility level of the API. Accepts one of the following. PUBLIC, PRIVATE, RESTRICTED.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    PUBLIC("PUBLIC"),
    
    PRIVATE("PRIVATE"),
    
    RESTRICTED("RESTRICTED");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  @jakarta.annotation.Nullable
  private VisibilityEnum visibility = VisibilityEnum.PUBLIC;

  public static final String SERIALIZED_NAME_VISIBLE_ROLES = "visibleRoles";
  @SerializedName(SERIALIZED_NAME_VISIBLE_ROLES)
  @jakarta.annotation.Nullable
  private List<String> visibleRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE_TENANTS = "visibleTenants";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TENANTS)
  @jakarta.annotation.Nullable
  private List<String> visibleTenants = new ArrayList<>();

  /**
   * Defines whether the API Product is restricted to certain set of publishers or creators or is it visible to all the publishers and creators. If the accessControl restriction is none, this API Product can be modified by all the publishers and creators, if not it can only be viewable/modifiable by certain set of publishers and creators, based on the restriction. 
   */
  @JsonAdapter(AccessControlEnum.Adapter.class)
  public enum AccessControlEnum {
    NONE("NONE"),
    
    RESTRICTED("RESTRICTED");

    private String value;

    AccessControlEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessControlEnum fromValue(String value) {
      for (AccessControlEnum b : AccessControlEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessControlEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessControlEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessControlEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessControlEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessControlEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_CONTROL = "accessControl";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL)
  @jakarta.annotation.Nullable
  private AccessControlEnum accessControl = AccessControlEnum.NONE;

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_ROLES = "accessControlRoles";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_ROLES)
  @jakarta.annotation.Nullable
  private List<String> accessControlRoles = new ArrayList<>();

  /**
   * The API type to be used. Accepted values are API, APIPRODUCT
   */
  @JsonAdapter(ApiTypeEnum.Adapter.class)
  public enum ApiTypeEnum {
    API("API"),
    
    APIPRODUCT("APIPRODUCT");

    private String value;

    ApiTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiTypeEnum fromValue(String value) {
      for (ApiTypeEnum b : ApiTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_TYPE = "apiType";
  @SerializedName(SERIALIZED_NAME_API_TYPE)
  @jakarta.annotation.Nullable
  private ApiTypeEnum apiType;

  public static final String SERIALIZED_NAME_TRANSPORT = "transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  @jakarta.annotation.Nullable
  private List<String> transport = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @jakarta.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  @jakarta.annotation.Nullable
  private List<String> policies = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_THROTTLING_POLICY = "apiThrottlingPolicy";
  @SerializedName(SERIALIZED_NAME_API_THROTTLING_POLICY)
  @jakarta.annotation.Nullable
  private String apiThrottlingPolicy;

  public static final String SERIALIZED_NAME_AUTHORIZATION_HEADER = "authorizationHeader";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_HEADER)
  @jakarta.annotation.Nullable
  private String authorizationHeader;

  public static final String SERIALIZED_NAME_API_KEY_HEADER = "apiKeyHeader";
  @SerializedName(SERIALIZED_NAME_API_KEY_HEADER)
  @jakarta.annotation.Nullable
  private String apiKeyHeader;

  public static final String SERIALIZED_NAME_SECURITY_SCHEME = "securityScheme";
  @SerializedName(SERIALIZED_NAME_SECURITY_SCHEME)
  @jakarta.annotation.Nullable
  private List<String> securityScheme = new ArrayList<>();

  /**
   * The subscription availability. Accepts one of the following. CURRENT_TENANT, ALL_TENANTS or SPECIFIC_TENANTS.
   */
  @JsonAdapter(SubscriptionAvailabilityEnum.Adapter.class)
  public enum SubscriptionAvailabilityEnum {
    CURRENT_TENANT("CURRENT_TENANT"),
    
    ALL_TENANTS("ALL_TENANTS"),
    
    SPECIFIC_TENANTS("SPECIFIC_TENANTS");

    private String value;

    SubscriptionAvailabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionAvailabilityEnum fromValue(String value) {
      for (SubscriptionAvailabilityEnum b : SubscriptionAvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionAvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionAvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionAvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionAvailabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubscriptionAvailabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTION_AVAILABILITY = "subscriptionAvailability";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_AVAILABILITY)
  @jakarta.annotation.Nullable
  private SubscriptionAvailabilityEnum subscriptionAvailability = SubscriptionAvailabilityEnum.ALL_TENANTS;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_AVAILABLE_TENANTS = "subscriptionAvailableTenants";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_AVAILABLE_TENANTS)
  @jakarta.annotation.Nullable
  private List<String> subscriptionAvailableTenants = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  @jakarta.annotation.Nullable
  private List<APIInfoAdditionalPropertiesInnerDTO> additionalProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES_MAP = "additionalPropertiesMap";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES_MAP)
  @jakarta.annotation.Nullable
  private Map<String, APIInfoAdditionalPropertiesMapValueDTO> additionalPropertiesMap = new HashMap<>();

  public static final String SERIALIZED_NAME_MONETIZATION = "monetization";
  @SerializedName(SERIALIZED_NAME_MONETIZATION)
  @jakarta.annotation.Nullable
  private APIMonetizationInfoDTO monetization;

  public static final String SERIALIZED_NAME_BUSINESS_INFORMATION = "businessInformation";
  @SerializedName(SERIALIZED_NAME_BUSINESS_INFORMATION)
  @jakarta.annotation.Nullable
  private APIProductBusinessInformationDTO businessInformation;

  public static final String SERIALIZED_NAME_CORS_CONFIGURATION = "corsConfiguration";
  @SerializedName(SERIALIZED_NAME_CORS_CONFIGURATION)
  @jakarta.annotation.Nullable
  private APICorsConfigurationDTO corsConfiguration;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  @jakarta.annotation.Nullable
  private String createdTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "lastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  @jakarta.annotation.Nullable
  private String lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  @jakarta.annotation.Nullable
  private String lastUpdatedTime;

  public static final String SERIALIZED_NAME_GATEWAY_VENDOR = "gatewayVendor";
  @SerializedName(SERIALIZED_NAME_GATEWAY_VENDOR)
  @jakarta.annotation.Nullable
  private String gatewayVendor;

  public static final String SERIALIZED_NAME_APIS = "apis";
  @SerializedName(SERIALIZED_NAME_APIS)
  @jakarta.annotation.Nullable
  private List<ProductAPIDTO> apis = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  @jakarta.annotation.Nullable
  private List<APIScopeDTO> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  @jakarta.annotation.Nullable
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKFLOW_STATUS = "workflowStatus";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_STATUS)
  @jakarta.annotation.Nullable
  private String workflowStatus;

  public static final String SERIALIZED_NAME_AUDIENCES = "audiences";
  @SerializedName(SERIALIZED_NAME_AUDIENCES)
  @jakarta.annotation.Nullable
  private List<String> audiences = new ArrayList<>();

  public APIProductDTO() {
  }

  public APIProductDTO(
     String id, 
     String revisionedApiProductId
  ) {
    this();
    this.id = id;
    this.revisionedApiProductId = revisionedApiProductId;
  }

  /**
   * UUID of the api product 
   * @return id
   */
  @jakarta.annotation.Nullable
  public String getId() {
    return id;
  }



  public APIProductDTO name(@jakarta.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the API Product
   * @return name
   */
  @jakarta.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }


  public APIProductDTO context(@jakarta.annotation.Nullable String context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @jakarta.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(@jakarta.annotation.Nullable String context) {
    this.context = context;
  }


  public APIProductDTO version(@jakarta.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@jakarta.annotation.Nullable String version) {
    this.version = version;
  }


  public APIProductDTO description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief description about the API
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public APIProductDTO provider(@jakarta.annotation.Nullable String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * If the provider value is not given, the user invoking the API will be used as the provider. 
   * @return provider
   */
  @jakarta.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(@jakarta.annotation.Nullable String provider) {
    this.provider = provider;
  }


  public APIProductDTO hasThumbnail(@jakarta.annotation.Nullable Boolean hasThumbnail) {
    this.hasThumbnail = hasThumbnail;
    return this;
  }

  /**
   * Get hasThumbnail
   * @return hasThumbnail
   */
  @jakarta.annotation.Nullable
  public Boolean getHasThumbnail() {
    return hasThumbnail;
  }

  public void setHasThumbnail(@jakarta.annotation.Nullable Boolean hasThumbnail) {
    this.hasThumbnail = hasThumbnail;
  }


  public APIProductDTO state(@jakarta.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the API product. Only published api products are visible on the Developer Portal 
   * @return state
   */
  @jakarta.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@jakarta.annotation.Nullable String state) {
    this.state = state;
  }


  public APIProductDTO enableSchemaValidation(@jakarta.annotation.Nullable Boolean enableSchemaValidation) {
    this.enableSchemaValidation = enableSchemaValidation;
    return this;
  }

  /**
   * Get enableSchemaValidation
   * @return enableSchemaValidation
   */
  @jakarta.annotation.Nullable
  public Boolean getEnableSchemaValidation() {
    return enableSchemaValidation;
  }

  public void setEnableSchemaValidation(@jakarta.annotation.Nullable Boolean enableSchemaValidation) {
    this.enableSchemaValidation = enableSchemaValidation;
  }


  public APIProductDTO isDefaultVersion(@jakarta.annotation.Nullable Boolean isDefaultVersion) {
    this.isDefaultVersion = isDefaultVersion;
    return this;
  }

  /**
   * Get isDefaultVersion
   * @return isDefaultVersion
   */
  @jakarta.annotation.Nullable
  public Boolean getIsDefaultVersion() {
    return isDefaultVersion;
  }

  public void setIsDefaultVersion(@jakarta.annotation.Nullable Boolean isDefaultVersion) {
    this.isDefaultVersion = isDefaultVersion;
  }


  public APIProductDTO isRevision(@jakarta.annotation.Nullable Boolean isRevision) {
    this.isRevision = isRevision;
    return this;
  }

  /**
   * Get isRevision
   * @return isRevision
   */
  @jakarta.annotation.Nullable
  public Boolean getIsRevision() {
    return isRevision;
  }

  public void setIsRevision(@jakarta.annotation.Nullable Boolean isRevision) {
    this.isRevision = isRevision;
  }


  /**
   * UUID of the api product registry artifact 
   * @return revisionedApiProductId
   */
  @jakarta.annotation.Nullable
  public String getRevisionedApiProductId() {
    return revisionedApiProductId;
  }



  public APIProductDTO revisionId(@jakarta.annotation.Nullable Integer revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Get revisionId
   * @return revisionId
   */
  @jakarta.annotation.Nullable
  public Integer getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(@jakarta.annotation.Nullable Integer revisionId) {
    this.revisionId = revisionId;
  }


  public APIProductDTO responseCachingEnabled(@jakarta.annotation.Nullable Boolean responseCachingEnabled) {
    this.responseCachingEnabled = responseCachingEnabled;
    return this;
  }

  /**
   * Get responseCachingEnabled
   * @return responseCachingEnabled
   */
  @jakarta.annotation.Nullable
  public Boolean getResponseCachingEnabled() {
    return responseCachingEnabled;
  }

  public void setResponseCachingEnabled(@jakarta.annotation.Nullable Boolean responseCachingEnabled) {
    this.responseCachingEnabled = responseCachingEnabled;
  }


  public APIProductDTO cacheTimeout(@jakarta.annotation.Nullable Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Get cacheTimeout
   * @return cacheTimeout
   */
  @jakarta.annotation.Nullable
  public Integer getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(@jakarta.annotation.Nullable Integer cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public APIProductDTO visibility(@jakarta.annotation.Nullable VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The visibility level of the API. Accepts one of the following. PUBLIC, PRIVATE, RESTRICTED.
   * @return visibility
   */
  @jakarta.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(@jakarta.annotation.Nullable VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public APIProductDTO visibleRoles(@jakarta.annotation.Nullable List<String> visibleRoles) {
    this.visibleRoles = visibleRoles;
    return this;
  }

  public APIProductDTO addVisibleRolesItem(String visibleRolesItem) {
    if (this.visibleRoles == null) {
      this.visibleRoles = new ArrayList<>();
    }
    this.visibleRoles.add(visibleRolesItem);
    return this;
  }

  /**
   * The user roles that are able to access the API
   * @return visibleRoles
   */
  @jakarta.annotation.Nullable
  public List<String> getVisibleRoles() {
    return visibleRoles;
  }

  public void setVisibleRoles(@jakarta.annotation.Nullable List<String> visibleRoles) {
    this.visibleRoles = visibleRoles;
  }


  public APIProductDTO visibleTenants(@jakarta.annotation.Nullable List<String> visibleTenants) {
    this.visibleTenants = visibleTenants;
    return this;
  }

  public APIProductDTO addVisibleTenantsItem(String visibleTenantsItem) {
    if (this.visibleTenants == null) {
      this.visibleTenants = new ArrayList<>();
    }
    this.visibleTenants.add(visibleTenantsItem);
    return this;
  }

  /**
   * Get visibleTenants
   * @return visibleTenants
   */
  @jakarta.annotation.Nullable
  public List<String> getVisibleTenants() {
    return visibleTenants;
  }

  public void setVisibleTenants(@jakarta.annotation.Nullable List<String> visibleTenants) {
    this.visibleTenants = visibleTenants;
  }


  public APIProductDTO accessControl(@jakarta.annotation.Nullable AccessControlEnum accessControl) {
    this.accessControl = accessControl;
    return this;
  }

  /**
   * Defines whether the API Product is restricted to certain set of publishers or creators or is it visible to all the publishers and creators. If the accessControl restriction is none, this API Product can be modified by all the publishers and creators, if not it can only be viewable/modifiable by certain set of publishers and creators, based on the restriction. 
   * @return accessControl
   */
  @jakarta.annotation.Nullable
  public AccessControlEnum getAccessControl() {
    return accessControl;
  }

  public void setAccessControl(@jakarta.annotation.Nullable AccessControlEnum accessControl) {
    this.accessControl = accessControl;
  }


  public APIProductDTO accessControlRoles(@jakarta.annotation.Nullable List<String> accessControlRoles) {
    this.accessControlRoles = accessControlRoles;
    return this;
  }

  public APIProductDTO addAccessControlRolesItem(String accessControlRolesItem) {
    if (this.accessControlRoles == null) {
      this.accessControlRoles = new ArrayList<>();
    }
    this.accessControlRoles.add(accessControlRolesItem);
    return this;
  }

  /**
   * The user roles that are able to view/modify as API Product publisher or creator.
   * @return accessControlRoles
   */
  @jakarta.annotation.Nullable
  public List<String> getAccessControlRoles() {
    return accessControlRoles;
  }

  public void setAccessControlRoles(@jakarta.annotation.Nullable List<String> accessControlRoles) {
    this.accessControlRoles = accessControlRoles;
  }


  public APIProductDTO apiType(@jakarta.annotation.Nullable ApiTypeEnum apiType) {
    this.apiType = apiType;
    return this;
  }

  /**
   * The API type to be used. Accepted values are API, APIPRODUCT
   * @return apiType
   */
  @jakarta.annotation.Nullable
  public ApiTypeEnum getApiType() {
    return apiType;
  }

  public void setApiType(@jakarta.annotation.Nullable ApiTypeEnum apiType) {
    this.apiType = apiType;
  }


  public APIProductDTO transport(@jakarta.annotation.Nullable List<String> transport) {
    this.transport = transport;
    return this;
  }

  public APIProductDTO addTransportItem(String transportItem) {
    if (this.transport == null) {
      this.transport = new ArrayList<>();
    }
    this.transport.add(transportItem);
    return this;
  }

  /**
   * Supported transports for the API (http and/or https). 
   * @return transport
   */
  @jakarta.annotation.Nullable
  public List<String> getTransport() {
    return transport;
  }

  public void setTransport(@jakarta.annotation.Nullable List<String> transport) {
    this.transport = transport;
  }


  public APIProductDTO tags(@jakarta.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public APIProductDTO addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @jakarta.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@jakarta.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public APIProductDTO policies(@jakarta.annotation.Nullable List<String> policies) {
    this.policies = policies;
    return this;
  }

  public APIProductDTO addPoliciesItem(String policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @jakarta.annotation.Nullable
  public List<String> getPolicies() {
    return policies;
  }

  public void setPolicies(@jakarta.annotation.Nullable List<String> policies) {
    this.policies = policies;
  }


  public APIProductDTO apiThrottlingPolicy(@jakarta.annotation.Nullable String apiThrottlingPolicy) {
    this.apiThrottlingPolicy = apiThrottlingPolicy;
    return this;
  }

  /**
   * The API level throttling policy selected for the particular API Product
   * @return apiThrottlingPolicy
   */
  @jakarta.annotation.Nullable
  public String getApiThrottlingPolicy() {
    return apiThrottlingPolicy;
  }

  public void setApiThrottlingPolicy(@jakarta.annotation.Nullable String apiThrottlingPolicy) {
    this.apiThrottlingPolicy = apiThrottlingPolicy;
  }


  public APIProductDTO authorizationHeader(@jakarta.annotation.Nullable String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
    return this;
  }

  /**
   * Name of the Authorization header used for invoking the API. If it is not set, Authorization header name specified in tenant or system level will be used. 
   * @return authorizationHeader
   */
  @jakarta.annotation.Nullable
  public String getAuthorizationHeader() {
    return authorizationHeader;
  }

  public void setAuthorizationHeader(@jakarta.annotation.Nullable String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
  }


  public APIProductDTO apiKeyHeader(@jakarta.annotation.Nullable String apiKeyHeader) {
    this.apiKeyHeader = apiKeyHeader;
    return this;
  }

  /**
   * Name of the API key header used for invoking the API. If it is not set, default value &#x60;apiKey&#x60; will be used. 
   * @return apiKeyHeader
   */
  @jakarta.annotation.Nullable
  public String getApiKeyHeader() {
    return apiKeyHeader;
  }

  public void setApiKeyHeader(@jakarta.annotation.Nullable String apiKeyHeader) {
    this.apiKeyHeader = apiKeyHeader;
  }


  public APIProductDTO securityScheme(@jakarta.annotation.Nullable List<String> securityScheme) {
    this.securityScheme = securityScheme;
    return this;
  }

  public APIProductDTO addSecuritySchemeItem(String securitySchemeItem) {
    if (this.securityScheme == null) {
      this.securityScheme = new ArrayList<>();
    }
    this.securityScheme.add(securitySchemeItem);
    return this;
  }

  /**
   * Types of API security, the current API secured with. It can be either OAuth2 or mutual SSL or both. If it is not set OAuth2 will be set as the security for the current API. 
   * @return securityScheme
   */
  @jakarta.annotation.Nullable
  public List<String> getSecurityScheme() {
    return securityScheme;
  }

  public void setSecurityScheme(@jakarta.annotation.Nullable List<String> securityScheme) {
    this.securityScheme = securityScheme;
  }


  public APIProductDTO subscriptionAvailability(@jakarta.annotation.Nullable SubscriptionAvailabilityEnum subscriptionAvailability) {
    this.subscriptionAvailability = subscriptionAvailability;
    return this;
  }

  /**
   * The subscription availability. Accepts one of the following. CURRENT_TENANT, ALL_TENANTS or SPECIFIC_TENANTS.
   * @return subscriptionAvailability
   */
  @jakarta.annotation.Nullable
  public SubscriptionAvailabilityEnum getSubscriptionAvailability() {
    return subscriptionAvailability;
  }

  public void setSubscriptionAvailability(@jakarta.annotation.Nullable SubscriptionAvailabilityEnum subscriptionAvailability) {
    this.subscriptionAvailability = subscriptionAvailability;
  }


  public APIProductDTO subscriptionAvailableTenants(@jakarta.annotation.Nullable List<String> subscriptionAvailableTenants) {
    this.subscriptionAvailableTenants = subscriptionAvailableTenants;
    return this;
  }

  public APIProductDTO addSubscriptionAvailableTenantsItem(String subscriptionAvailableTenantsItem) {
    if (this.subscriptionAvailableTenants == null) {
      this.subscriptionAvailableTenants = new ArrayList<>();
    }
    this.subscriptionAvailableTenants.add(subscriptionAvailableTenantsItem);
    return this;
  }

  /**
   * Get subscriptionAvailableTenants
   * @return subscriptionAvailableTenants
   */
  @jakarta.annotation.Nullable
  public List<String> getSubscriptionAvailableTenants() {
    return subscriptionAvailableTenants;
  }

  public void setSubscriptionAvailableTenants(@jakarta.annotation.Nullable List<String> subscriptionAvailableTenants) {
    this.subscriptionAvailableTenants = subscriptionAvailableTenants;
  }


  public APIProductDTO additionalProperties(@jakarta.annotation.Nullable List<APIInfoAdditionalPropertiesInnerDTO> additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  public APIProductDTO addAdditionalPropertiesItem(APIInfoAdditionalPropertiesInnerDTO additionalPropertiesItem) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new ArrayList<>();
    }
    this.additionalProperties.add(additionalPropertiesItem);
    return this;
  }

  /**
   * Map of custom properties of API
   * @return additionalProperties
   */
  @jakarta.annotation.Nullable
  public List<APIInfoAdditionalPropertiesInnerDTO> getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(@jakarta.annotation.Nullable List<APIInfoAdditionalPropertiesInnerDTO> additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public APIProductDTO additionalPropertiesMap(@jakarta.annotation.Nullable Map<String, APIInfoAdditionalPropertiesMapValueDTO> additionalPropertiesMap) {
    this.additionalPropertiesMap = additionalPropertiesMap;
    return this;
  }

  public APIProductDTO putAdditionalPropertiesMapItem(String key, APIInfoAdditionalPropertiesMapValueDTO additionalPropertiesMapItem) {
    if (this.additionalPropertiesMap == null) {
      this.additionalPropertiesMap = new HashMap<>();
    }
    this.additionalPropertiesMap.put(key, additionalPropertiesMapItem);
    return this;
  }

  /**
   * Get additionalPropertiesMap
   * @return additionalPropertiesMap
   */
  @jakarta.annotation.Nullable
  public Map<String, APIInfoAdditionalPropertiesMapValueDTO> getAdditionalPropertiesMap() {
    return additionalPropertiesMap;
  }

  public void setAdditionalPropertiesMap(@jakarta.annotation.Nullable Map<String, APIInfoAdditionalPropertiesMapValueDTO> additionalPropertiesMap) {
    this.additionalPropertiesMap = additionalPropertiesMap;
  }


  public APIProductDTO monetization(@jakarta.annotation.Nullable APIMonetizationInfoDTO monetization) {
    this.monetization = monetization;
    return this;
  }

  /**
   * Get monetization
   * @return monetization
   */
  @jakarta.annotation.Nullable
  public APIMonetizationInfoDTO getMonetization() {
    return monetization;
  }

  public void setMonetization(@jakarta.annotation.Nullable APIMonetizationInfoDTO monetization) {
    this.monetization = monetization;
  }


  public APIProductDTO businessInformation(@jakarta.annotation.Nullable APIProductBusinessInformationDTO businessInformation) {
    this.businessInformation = businessInformation;
    return this;
  }

  /**
   * Get businessInformation
   * @return businessInformation
   */
  @jakarta.annotation.Nullable
  public APIProductBusinessInformationDTO getBusinessInformation() {
    return businessInformation;
  }

  public void setBusinessInformation(@jakarta.annotation.Nullable APIProductBusinessInformationDTO businessInformation) {
    this.businessInformation = businessInformation;
  }


  public APIProductDTO corsConfiguration(@jakarta.annotation.Nullable APICorsConfigurationDTO corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
    return this;
  }

  /**
   * Get corsConfiguration
   * @return corsConfiguration
   */
  @jakarta.annotation.Nullable
  public APICorsConfigurationDTO getCorsConfiguration() {
    return corsConfiguration;
  }

  public void setCorsConfiguration(@jakarta.annotation.Nullable APICorsConfigurationDTO corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
  }


  public APIProductDTO createdTime(@jakarta.annotation.Nullable String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @jakarta.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(@jakarta.annotation.Nullable String createdTime) {
    this.createdTime = createdTime;
  }


  public APIProductDTO lastUpdatedTimestamp(@jakarta.annotation.Nullable String lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Get lastUpdatedTimestamp
   * @return lastUpdatedTimestamp
   */
  @jakarta.annotation.Nullable
  public String getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(@jakarta.annotation.Nullable String lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public APIProductDTO lastUpdatedTime(@jakarta.annotation.Nullable String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @jakarta.annotation.Nullable
  public String getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(@jakarta.annotation.Nullable String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public APIProductDTO gatewayVendor(@jakarta.annotation.Nullable String gatewayVendor) {
    this.gatewayVendor = gatewayVendor;
    return this;
  }

  /**
   * Get gatewayVendor
   * @return gatewayVendor
   */
  @jakarta.annotation.Nullable
  public String getGatewayVendor() {
    return gatewayVendor;
  }

  public void setGatewayVendor(@jakarta.annotation.Nullable String gatewayVendor) {
    this.gatewayVendor = gatewayVendor;
  }


  public APIProductDTO apis(@jakarta.annotation.Nullable List<ProductAPIDTO> apis) {
    this.apis = apis;
    return this;
  }

  public APIProductDTO addApisItem(ProductAPIDTO apisItem) {
    if (this.apis == null) {
      this.apis = new ArrayList<>();
    }
    this.apis.add(apisItem);
    return this;
  }

  /**
   * APIs and resources in the API Product. 
   * @return apis
   */
  @jakarta.annotation.Nullable
  public List<ProductAPIDTO> getApis() {
    return apis;
  }

  public void setApis(@jakarta.annotation.Nullable List<ProductAPIDTO> apis) {
    this.apis = apis;
  }


  public APIProductDTO scopes(@jakarta.annotation.Nullable List<APIScopeDTO> scopes) {
    this.scopes = scopes;
    return this;
  }

  public APIProductDTO addScopesItem(APIScopeDTO scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @jakarta.annotation.Nullable
  public List<APIScopeDTO> getScopes() {
    return scopes;
  }

  public void setScopes(@jakarta.annotation.Nullable List<APIScopeDTO> scopes) {
    this.scopes = scopes;
  }


  public APIProductDTO categories(@jakarta.annotation.Nullable List<String> categories) {
    this.categories = categories;
    return this;
  }

  public APIProductDTO addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * API categories 
   * @return categories
   */
  @jakarta.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(@jakarta.annotation.Nullable List<String> categories) {
    this.categories = categories;
  }


  public APIProductDTO workflowStatus(@jakarta.annotation.Nullable String workflowStatus) {
    this.workflowStatus = workflowStatus;
    return this;
  }

  /**
   * Get workflowStatus
   * @return workflowStatus
   */
  @jakarta.annotation.Nullable
  public String getWorkflowStatus() {
    return workflowStatus;
  }

  public void setWorkflowStatus(@jakarta.annotation.Nullable String workflowStatus) {
    this.workflowStatus = workflowStatus;
  }


  public APIProductDTO audiences(@jakarta.annotation.Nullable List<String> audiences) {
    this.audiences = audiences;
    return this;
  }

  public APIProductDTO addAudiencesItem(String audiencesItem) {
    if (this.audiences == null) {
      this.audiences = new ArrayList<>();
    }
    this.audiences.add(audiencesItem);
    return this;
  }

  /**
   * The audiences of the API for jwt validation. Accepted values are any String values
   * @return audiences
   */
  @jakarta.annotation.Nullable
  public List<String> getAudiences() {
    return audiences;
  }

  public void setAudiences(@jakarta.annotation.Nullable List<String> audiences) {
    this.audiences = audiences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIProductDTO apIProduct = (APIProductDTO) o;
    return Objects.equals(this.id, apIProduct.id) &&
        Objects.equals(this.name, apIProduct.name) &&
        Objects.equals(this.context, apIProduct.context) &&
        Objects.equals(this.version, apIProduct.version) &&
        Objects.equals(this.description, apIProduct.description) &&
        Objects.equals(this.provider, apIProduct.provider) &&
        Objects.equals(this.hasThumbnail, apIProduct.hasThumbnail) &&
        Objects.equals(this.state, apIProduct.state) &&
        Objects.equals(this.enableSchemaValidation, apIProduct.enableSchemaValidation) &&
        Objects.equals(this.isDefaultVersion, apIProduct.isDefaultVersion) &&
        Objects.equals(this.isRevision, apIProduct.isRevision) &&
        Objects.equals(this.revisionedApiProductId, apIProduct.revisionedApiProductId) &&
        Objects.equals(this.revisionId, apIProduct.revisionId) &&
        Objects.equals(this.responseCachingEnabled, apIProduct.responseCachingEnabled) &&
        Objects.equals(this.cacheTimeout, apIProduct.cacheTimeout) &&
        Objects.equals(this.visibility, apIProduct.visibility) &&
        Objects.equals(this.visibleRoles, apIProduct.visibleRoles) &&
        Objects.equals(this.visibleTenants, apIProduct.visibleTenants) &&
        Objects.equals(this.accessControl, apIProduct.accessControl) &&
        Objects.equals(this.accessControlRoles, apIProduct.accessControlRoles) &&
        Objects.equals(this.apiType, apIProduct.apiType) &&
        Objects.equals(this.transport, apIProduct.transport) &&
        Objects.equals(this.tags, apIProduct.tags) &&
        Objects.equals(this.policies, apIProduct.policies) &&
        Objects.equals(this.apiThrottlingPolicy, apIProduct.apiThrottlingPolicy) &&
        Objects.equals(this.authorizationHeader, apIProduct.authorizationHeader) &&
        Objects.equals(this.apiKeyHeader, apIProduct.apiKeyHeader) &&
        Objects.equals(this.securityScheme, apIProduct.securityScheme) &&
        Objects.equals(this.subscriptionAvailability, apIProduct.subscriptionAvailability) &&
        Objects.equals(this.subscriptionAvailableTenants, apIProduct.subscriptionAvailableTenants) &&
        Objects.equals(this.additionalProperties, apIProduct.additionalProperties) &&
        Objects.equals(this.additionalPropertiesMap, apIProduct.additionalPropertiesMap) &&
        Objects.equals(this.monetization, apIProduct.monetization) &&
        Objects.equals(this.businessInformation, apIProduct.businessInformation) &&
        Objects.equals(this.corsConfiguration, apIProduct.corsConfiguration) &&
        Objects.equals(this.createdTime, apIProduct.createdTime) &&
        Objects.equals(this.lastUpdatedTimestamp, apIProduct.lastUpdatedTimestamp) &&
        Objects.equals(this.lastUpdatedTime, apIProduct.lastUpdatedTime) &&
        Objects.equals(this.gatewayVendor, apIProduct.gatewayVendor) &&
        Objects.equals(this.apis, apIProduct.apis) &&
        Objects.equals(this.scopes, apIProduct.scopes) &&
        Objects.equals(this.categories, apIProduct.categories) &&
        Objects.equals(this.workflowStatus, apIProduct.workflowStatus) &&
        Objects.equals(this.audiences, apIProduct.audiences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, context, version, description, provider, hasThumbnail, state, enableSchemaValidation, isDefaultVersion, isRevision, revisionedApiProductId, revisionId, responseCachingEnabled, cacheTimeout, visibility, visibleRoles, visibleTenants, accessControl, accessControlRoles, apiType, transport, tags, policies, apiThrottlingPolicy, authorizationHeader, apiKeyHeader, securityScheme, subscriptionAvailability, subscriptionAvailableTenants, additionalProperties, additionalPropertiesMap, monetization, businessInformation, corsConfiguration, createdTime, lastUpdatedTimestamp, lastUpdatedTime, gatewayVendor, apis, scopes, categories, workflowStatus, audiences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIProductDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    hasThumbnail: ").append(toIndentedString(hasThumbnail)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    enableSchemaValidation: ").append(toIndentedString(enableSchemaValidation)).append("\n");
    sb.append("    isDefaultVersion: ").append(toIndentedString(isDefaultVersion)).append("\n");
    sb.append("    isRevision: ").append(toIndentedString(isRevision)).append("\n");
    sb.append("    revisionedApiProductId: ").append(toIndentedString(revisionedApiProductId)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    responseCachingEnabled: ").append(toIndentedString(responseCachingEnabled)).append("\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    visibleRoles: ").append(toIndentedString(visibleRoles)).append("\n");
    sb.append("    visibleTenants: ").append(toIndentedString(visibleTenants)).append("\n");
    sb.append("    accessControl: ").append(toIndentedString(accessControl)).append("\n");
    sb.append("    accessControlRoles: ").append(toIndentedString(accessControlRoles)).append("\n");
    sb.append("    apiType: ").append(toIndentedString(apiType)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    apiThrottlingPolicy: ").append(toIndentedString(apiThrottlingPolicy)).append("\n");
    sb.append("    authorizationHeader: ").append(toIndentedString(authorizationHeader)).append("\n");
    sb.append("    apiKeyHeader: ").append(toIndentedString(apiKeyHeader)).append("\n");
    sb.append("    securityScheme: ").append(toIndentedString(securityScheme)).append("\n");
    sb.append("    subscriptionAvailability: ").append(toIndentedString(subscriptionAvailability)).append("\n");
    sb.append("    subscriptionAvailableTenants: ").append(toIndentedString(subscriptionAvailableTenants)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    additionalPropertiesMap: ").append(toIndentedString(additionalPropertiesMap)).append("\n");
    sb.append("    monetization: ").append(toIndentedString(monetization)).append("\n");
    sb.append("    businessInformation: ").append(toIndentedString(businessInformation)).append("\n");
    sb.append("    corsConfiguration: ").append(toIndentedString(corsConfiguration)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    gatewayVendor: ").append(toIndentedString(gatewayVendor)).append("\n");
    sb.append("    apis: ").append(toIndentedString(apis)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    workflowStatus: ").append(toIndentedString(workflowStatus)).append("\n");
    sb.append("    audiences: ").append(toIndentedString(audiences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("context");
    openapiFields.add("version");
    openapiFields.add("description");
    openapiFields.add("provider");
    openapiFields.add("hasThumbnail");
    openapiFields.add("state");
    openapiFields.add("enableSchemaValidation");
    openapiFields.add("isDefaultVersion");
    openapiFields.add("isRevision");
    openapiFields.add("revisionedApiProductId");
    openapiFields.add("revisionId");
    openapiFields.add("responseCachingEnabled");
    openapiFields.add("cacheTimeout");
    openapiFields.add("visibility");
    openapiFields.add("visibleRoles");
    openapiFields.add("visibleTenants");
    openapiFields.add("accessControl");
    openapiFields.add("accessControlRoles");
    openapiFields.add("apiType");
    openapiFields.add("transport");
    openapiFields.add("tags");
    openapiFields.add("policies");
    openapiFields.add("apiThrottlingPolicy");
    openapiFields.add("authorizationHeader");
    openapiFields.add("apiKeyHeader");
    openapiFields.add("securityScheme");
    openapiFields.add("subscriptionAvailability");
    openapiFields.add("subscriptionAvailableTenants");
    openapiFields.add("additionalProperties");
    openapiFields.add("additionalPropertiesMap");
    openapiFields.add("monetization");
    openapiFields.add("businessInformation");
    openapiFields.add("corsConfiguration");
    openapiFields.add("createdTime");
    openapiFields.add("lastUpdatedTimestamp");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("gatewayVendor");
    openapiFields.add("apis");
    openapiFields.add("scopes");
    openapiFields.add("categories");
    openapiFields.add("workflowStatus");
    openapiFields.add("audiences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIProductDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIProductDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIProductDTO is not found in the empty JSON string", APIProductDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIProductDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIProductDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APIProductDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) && !jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("revisionedApiProductId") != null && !jsonObj.get("revisionedApiProductId").isJsonNull()) && !jsonObj.get("revisionedApiProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionedApiProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionedApiProductId").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("visibleRoles") != null && !jsonObj.get("visibleRoles").isJsonNull() && !jsonObj.get("visibleRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibleRoles` to be an array in the JSON string but got `%s`", jsonObj.get("visibleRoles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("visibleTenants") != null && !jsonObj.get("visibleTenants").isJsonNull() && !jsonObj.get("visibleTenants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibleTenants` to be an array in the JSON string but got `%s`", jsonObj.get("visibleTenants").toString()));
      }
      if ((jsonObj.get("accessControl") != null && !jsonObj.get("accessControl").isJsonNull()) && !jsonObj.get("accessControl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessControl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessControl").toString()));
      }
      // validate the optional field `accessControl`
      if (jsonObj.get("accessControl") != null && !jsonObj.get("accessControl").isJsonNull()) {
        AccessControlEnum.validateJsonElement(jsonObj.get("accessControl"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessControlRoles") != null && !jsonObj.get("accessControlRoles").isJsonNull() && !jsonObj.get("accessControlRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessControlRoles` to be an array in the JSON string but got `%s`", jsonObj.get("accessControlRoles").toString()));
      }
      if ((jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) && !jsonObj.get("apiType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiType").toString()));
      }
      // validate the optional field `apiType`
      if (jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) {
        ApiTypeEnum.validateJsonElement(jsonObj.get("apiType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transport") != null && !jsonObj.get("transport").isJsonNull() && !jsonObj.get("transport").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport` to be an array in the JSON string but got `%s`", jsonObj.get("transport").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull() && !jsonObj.get("policies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
      }
      if ((jsonObj.get("apiThrottlingPolicy") != null && !jsonObj.get("apiThrottlingPolicy").isJsonNull()) && !jsonObj.get("apiThrottlingPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiThrottlingPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiThrottlingPolicy").toString()));
      }
      if ((jsonObj.get("authorizationHeader") != null && !jsonObj.get("authorizationHeader").isJsonNull()) && !jsonObj.get("authorizationHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationHeader").toString()));
      }
      if ((jsonObj.get("apiKeyHeader") != null && !jsonObj.get("apiKeyHeader").isJsonNull()) && !jsonObj.get("apiKeyHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeyHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKeyHeader").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("securityScheme") != null && !jsonObj.get("securityScheme").isJsonNull() && !jsonObj.get("securityScheme").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityScheme` to be an array in the JSON string but got `%s`", jsonObj.get("securityScheme").toString()));
      }
      if ((jsonObj.get("subscriptionAvailability") != null && !jsonObj.get("subscriptionAvailability").isJsonNull()) && !jsonObj.get("subscriptionAvailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionAvailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionAvailability").toString()));
      }
      // validate the optional field `subscriptionAvailability`
      if (jsonObj.get("subscriptionAvailability") != null && !jsonObj.get("subscriptionAvailability").isJsonNull()) {
        SubscriptionAvailabilityEnum.validateJsonElement(jsonObj.get("subscriptionAvailability"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subscriptionAvailableTenants") != null && !jsonObj.get("subscriptionAvailableTenants").isJsonNull() && !jsonObj.get("subscriptionAvailableTenants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionAvailableTenants` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptionAvailableTenants").toString()));
      }
      if (jsonObj.get("additionalProperties") != null && !jsonObj.get("additionalProperties").isJsonNull()) {
        JsonArray jsonArrayadditionalProperties = jsonObj.getAsJsonArray("additionalProperties");
        if (jsonArrayadditionalProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalProperties` to be an array in the JSON string but got `%s`", jsonObj.get("additionalProperties").toString()));
          }

          // validate the optional field `additionalProperties` (array)
          for (int i = 0; i < jsonArrayadditionalProperties.size(); i++) {
            APIInfoAdditionalPropertiesInnerDTO.validateJsonElement(jsonArrayadditionalProperties.get(i));
          };
        }
      }
      // validate the optional field `monetization`
      if (jsonObj.get("monetization") != null && !jsonObj.get("monetization").isJsonNull()) {
        APIMonetizationInfoDTO.validateJsonElement(jsonObj.get("monetization"));
      }
      // validate the optional field `businessInformation`
      if (jsonObj.get("businessInformation") != null && !jsonObj.get("businessInformation").isJsonNull()) {
        APIProductBusinessInformationDTO.validateJsonElement(jsonObj.get("businessInformation"));
      }
      // validate the optional field `corsConfiguration`
      if (jsonObj.get("corsConfiguration") != null && !jsonObj.get("corsConfiguration").isJsonNull()) {
        APICorsConfigurationDTO.validateJsonElement(jsonObj.get("corsConfiguration"));
      }
      if ((jsonObj.get("createdTime") != null && !jsonObj.get("createdTime").isJsonNull()) && !jsonObj.get("createdTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTime").toString()));
      }
      if ((jsonObj.get("lastUpdatedTimestamp") != null && !jsonObj.get("lastUpdatedTimestamp").isJsonNull()) && !jsonObj.get("lastUpdatedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdatedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdatedTimestamp").toString()));
      }
      if ((jsonObj.get("lastUpdatedTime") != null && !jsonObj.get("lastUpdatedTime").isJsonNull()) && !jsonObj.get("lastUpdatedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdatedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdatedTime").toString()));
      }
      if ((jsonObj.get("gatewayVendor") != null && !jsonObj.get("gatewayVendor").isJsonNull()) && !jsonObj.get("gatewayVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayVendor").toString()));
      }
      if (jsonObj.get("apis") != null && !jsonObj.get("apis").isJsonNull()) {
        JsonArray jsonArrayapis = jsonObj.getAsJsonArray("apis");
        if (jsonArrayapis != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apis").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apis` to be an array in the JSON string but got `%s`", jsonObj.get("apis").toString()));
          }

          // validate the optional field `apis` (array)
          for (int i = 0; i < jsonArrayapis.size(); i++) {
            ProductAPIDTO.validateJsonElement(jsonArrayapis.get(i));
          };
        }
      }
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull()) {
        JsonArray jsonArrayscopes = jsonObj.getAsJsonArray("scopes");
        if (jsonArrayscopes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scopes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
          }

          // validate the optional field `scopes` (array)
          for (int i = 0; i < jsonArrayscopes.size(); i++) {
            APIScopeDTO.validateJsonElement(jsonArrayscopes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("workflowStatus") != null && !jsonObj.get("workflowStatus").isJsonNull()) && !jsonObj.get("workflowStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowStatus").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audiences") != null && !jsonObj.get("audiences").isJsonNull() && !jsonObj.get("audiences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audiences` to be an array in the JSON string but got `%s`", jsonObj.get("audiences").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIProductDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIProductDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIProductDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIProductDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<APIProductDTO>() {
           @Override
           public void write(JsonWriter out, APIProductDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIProductDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIProductDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIProductDTO
   * @throws IOException if the JSON string is invalid with respect to APIProductDTO
   */
  public static APIProductDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIProductDTO.class);
  }

  /**
   * Convert an instance of APIProductDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


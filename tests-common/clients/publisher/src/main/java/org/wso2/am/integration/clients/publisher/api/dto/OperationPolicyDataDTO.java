/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.wso2.am.integration.clients.publisher.api.dto.OperationPolicySpecAttributeDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.wso2.am.integration.clients.publisher.JSON;

/**
 * OperationPolicyDataDTO
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0-SNAPSHOT")
public class OperationPolicyDataDTO {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @jakarta.annotation.Nullable
  private String category;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @jakarta.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @jakarta.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @jakarta.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @jakarta.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @jakarta.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_APPLICABLE_FLOWS = "applicableFlows";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_FLOWS)
  @jakarta.annotation.Nullable
  private List<String> applicableFlows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_GATEWAYS = "supportedGateways";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_GATEWAYS)
  @jakarta.annotation.Nullable
  private List<String> supportedGateways = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_API_TYPES = "supportedApiTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_API_TYPES)
  @jakarta.annotation.Nullable
  private List<Object> supportedApiTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_A_P_I_SPECIFIC = "isAPISpecific";
  @SerializedName(SERIALIZED_NAME_IS_A_P_I_SPECIFIC)
  @jakarta.annotation.Nullable
  private Boolean isAPISpecific;

  public static final String SERIALIZED_NAME_MD5 = "md5";
  @SerializedName(SERIALIZED_NAME_MD5)
  @jakarta.annotation.Nullable
  private String md5;

  public static final String SERIALIZED_NAME_POLICY_ATTRIBUTES = "policyAttributes";
  @SerializedName(SERIALIZED_NAME_POLICY_ATTRIBUTES)
  @jakarta.annotation.Nullable
  private List<OperationPolicySpecAttributeDTO> policyAttributes = new ArrayList<>();

  public OperationPolicyDataDTO() {
  }

  public OperationPolicyDataDTO category(@jakarta.annotation.Nullable String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @jakarta.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(@jakarta.annotation.Nullable String category) {
    this.category = category;
  }


  public OperationPolicyDataDTO id(@jakarta.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }


  public OperationPolicyDataDTO name(@jakarta.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }


  public OperationPolicyDataDTO version(@jakarta.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @jakarta.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@jakarta.annotation.Nullable String version) {
    this.version = version;
  }


  public OperationPolicyDataDTO displayName(@jakarta.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@jakarta.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public OperationPolicyDataDTO description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public OperationPolicyDataDTO applicableFlows(@jakarta.annotation.Nullable List<String> applicableFlows) {
    this.applicableFlows = applicableFlows;
    return this;
  }

  public OperationPolicyDataDTO addApplicableFlowsItem(String applicableFlowsItem) {
    if (this.applicableFlows == null) {
      this.applicableFlows = new ArrayList<>();
    }
    this.applicableFlows.add(applicableFlowsItem);
    return this;
  }

  /**
   * Get applicableFlows
   * @return applicableFlows
   */
  @jakarta.annotation.Nullable
  public List<String> getApplicableFlows() {
    return applicableFlows;
  }

  public void setApplicableFlows(@jakarta.annotation.Nullable List<String> applicableFlows) {
    this.applicableFlows = applicableFlows;
  }


  public OperationPolicyDataDTO supportedGateways(@jakarta.annotation.Nullable List<String> supportedGateways) {
    this.supportedGateways = supportedGateways;
    return this;
  }

  public OperationPolicyDataDTO addSupportedGatewaysItem(String supportedGatewaysItem) {
    if (this.supportedGateways == null) {
      this.supportedGateways = new ArrayList<>();
    }
    this.supportedGateways.add(supportedGatewaysItem);
    return this;
  }

  /**
   * Get supportedGateways
   * @return supportedGateways
   */
  @jakarta.annotation.Nullable
  public List<String> getSupportedGateways() {
    return supportedGateways;
  }

  public void setSupportedGateways(@jakarta.annotation.Nullable List<String> supportedGateways) {
    this.supportedGateways = supportedGateways;
  }


  public OperationPolicyDataDTO supportedApiTypes(@jakarta.annotation.Nullable List<Object> supportedApiTypes) {
    this.supportedApiTypes = supportedApiTypes;
    return this;
  }

  public OperationPolicyDataDTO addSupportedApiTypesItem(Object supportedApiTypesItem) {
    if (this.supportedApiTypes == null) {
      this.supportedApiTypes = new ArrayList<>();
    }
    this.supportedApiTypes.add(supportedApiTypesItem);
    return this;
  }

  /**
   * Supported API types as an array of strings, or an array of maps [HTTP, SOAP] [{apiType: HTTP, subType: AI}, {apiType: SOAP}] 
   * @return supportedApiTypes
   */
  @jakarta.annotation.Nullable
  public List<Object> getSupportedApiTypes() {
    return supportedApiTypes;
  }

  public void setSupportedApiTypes(@jakarta.annotation.Nullable List<Object> supportedApiTypes) {
    this.supportedApiTypes = supportedApiTypes;
  }


  public OperationPolicyDataDTO isAPISpecific(@jakarta.annotation.Nullable Boolean isAPISpecific) {
    this.isAPISpecific = isAPISpecific;
    return this;
  }

  /**
   * Get isAPISpecific
   * @return isAPISpecific
   */
  @jakarta.annotation.Nullable
  public Boolean getIsAPISpecific() {
    return isAPISpecific;
  }

  public void setIsAPISpecific(@jakarta.annotation.Nullable Boolean isAPISpecific) {
    this.isAPISpecific = isAPISpecific;
  }


  public OperationPolicyDataDTO md5(@jakarta.annotation.Nullable String md5) {
    this.md5 = md5;
    return this;
  }

  /**
   * Get md5
   * @return md5
   */
  @jakarta.annotation.Nullable
  public String getMd5() {
    return md5;
  }

  public void setMd5(@jakarta.annotation.Nullable String md5) {
    this.md5 = md5;
  }


  public OperationPolicyDataDTO policyAttributes(@jakarta.annotation.Nullable List<OperationPolicySpecAttributeDTO> policyAttributes) {
    this.policyAttributes = policyAttributes;
    return this;
  }

  public OperationPolicyDataDTO addPolicyAttributesItem(OperationPolicySpecAttributeDTO policyAttributesItem) {
    if (this.policyAttributes == null) {
      this.policyAttributes = new ArrayList<>();
    }
    this.policyAttributes.add(policyAttributesItem);
    return this;
  }

  /**
   * Get policyAttributes
   * @return policyAttributes
   */
  @jakarta.annotation.Nullable
  public List<OperationPolicySpecAttributeDTO> getPolicyAttributes() {
    return policyAttributes;
  }

  public void setPolicyAttributes(@jakarta.annotation.Nullable List<OperationPolicySpecAttributeDTO> policyAttributes) {
    this.policyAttributes = policyAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationPolicyDataDTO operationPolicyData = (OperationPolicyDataDTO) o;
    return Objects.equals(this.category, operationPolicyData.category) &&
        Objects.equals(this.id, operationPolicyData.id) &&
        Objects.equals(this.name, operationPolicyData.name) &&
        Objects.equals(this.version, operationPolicyData.version) &&
        Objects.equals(this.displayName, operationPolicyData.displayName) &&
        Objects.equals(this.description, operationPolicyData.description) &&
        Objects.equals(this.applicableFlows, operationPolicyData.applicableFlows) &&
        Objects.equals(this.supportedGateways, operationPolicyData.supportedGateways) &&
        Objects.equals(this.supportedApiTypes, operationPolicyData.supportedApiTypes) &&
        Objects.equals(this.isAPISpecific, operationPolicyData.isAPISpecific) &&
        Objects.equals(this.md5, operationPolicyData.md5) &&
        Objects.equals(this.policyAttributes, operationPolicyData.policyAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, id, name, version, displayName, description, applicableFlows, supportedGateways, supportedApiTypes, isAPISpecific, md5, policyAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationPolicyDataDTO {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    applicableFlows: ").append(toIndentedString(applicableFlows)).append("\n");
    sb.append("    supportedGateways: ").append(toIndentedString(supportedGateways)).append("\n");
    sb.append("    supportedApiTypes: ").append(toIndentedString(supportedApiTypes)).append("\n");
    sb.append("    isAPISpecific: ").append(toIndentedString(isAPISpecific)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    policyAttributes: ").append(toIndentedString(policyAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("version");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("applicableFlows");
    openapiFields.add("supportedGateways");
    openapiFields.add("supportedApiTypes");
    openapiFields.add("isAPISpecific");
    openapiFields.add("md5");
    openapiFields.add("policyAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationPolicyDataDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationPolicyDataDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationPolicyDataDTO is not found in the empty JSON string", OperationPolicyDataDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationPolicyDataDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationPolicyDataDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableFlows") != null && !jsonObj.get("applicableFlows").isJsonNull() && !jsonObj.get("applicableFlows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableFlows` to be an array in the JSON string but got `%s`", jsonObj.get("applicableFlows").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedGateways") != null && !jsonObj.get("supportedGateways").isJsonNull() && !jsonObj.get("supportedGateways").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedGateways` to be an array in the JSON string but got `%s`", jsonObj.get("supportedGateways").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedApiTypes") != null && !jsonObj.get("supportedApiTypes").isJsonNull() && !jsonObj.get("supportedApiTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedApiTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedApiTypes").toString()));
      }
      if ((jsonObj.get("md5") != null && !jsonObj.get("md5").isJsonNull()) && !jsonObj.get("md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5").toString()));
      }
      if (jsonObj.get("policyAttributes") != null && !jsonObj.get("policyAttributes").isJsonNull()) {
        JsonArray jsonArraypolicyAttributes = jsonObj.getAsJsonArray("policyAttributes");
        if (jsonArraypolicyAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policyAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policyAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("policyAttributes").toString()));
          }

          // validate the optional field `policyAttributes` (array)
          for (int i = 0; i < jsonArraypolicyAttributes.size(); i++) {
            OperationPolicySpecAttributeDTO.validateJsonElement(jsonArraypolicyAttributes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationPolicyDataDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationPolicyDataDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationPolicyDataDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationPolicyDataDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationPolicyDataDTO>() {
           @Override
           public void write(JsonWriter out, OperationPolicyDataDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationPolicyDataDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationPolicyDataDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationPolicyDataDTO
   * @throws IOException if the JSON string is invalid with respect to OperationPolicyDataDTO
   */
  public static OperationPolicyDataDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationPolicyDataDTO.class);
  }

  /**
   * Convert an instance of OperationPolicyDataDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


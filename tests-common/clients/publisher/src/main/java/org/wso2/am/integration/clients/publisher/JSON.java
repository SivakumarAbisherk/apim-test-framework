/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(org.wso2.am.integration.clients.publisher.api.dto.APIProductSearchResultDTO.class, new TypeSelector<org.wso2.am.integration.clients.publisher.api.dto.APIProductSearchResultDTO>() {
                    @Override
                    public Class<? extends org.wso2.am.integration.clients.publisher.api.dto.APIProductSearchResultDTO> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("APIProductSearchResult", org.wso2.am.integration.clients.publisher.api.dto.APIProductSearchResultDTO.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "name"));
                    }
          })
                .registerTypeSelector(org.wso2.am.integration.clients.publisher.api.dto.APISearchResultDTO.class, new TypeSelector<org.wso2.am.integration.clients.publisher.api.dto.APISearchResultDTO>() {
                    @Override
                    public Class<? extends org.wso2.am.integration.clients.publisher.api.dto.APISearchResultDTO> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("APISearchResult", org.wso2.am.integration.clients.publisher.api.dto.APISearchResultDTO.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "name"));
                    }
          })
                .registerTypeSelector(org.wso2.am.integration.clients.publisher.api.dto.DocumentSearchResultDTO.class, new TypeSelector<org.wso2.am.integration.clients.publisher.api.dto.DocumentSearchResultDTO>() {
                    @Override
                    public Class<? extends org.wso2.am.integration.clients.publisher.api.dto.DocumentSearchResultDTO> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DocumentSearchResult", org.wso2.am.integration.clients.publisher.api.dto.DocumentSearchResultDTO.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "name"));
                    }
          })
                .registerTypeSelector(org.wso2.am.integration.clients.publisher.api.dto.SearchResultDTO.class, new TypeSelector<org.wso2.am.integration.clients.publisher.api.dto.SearchResultDTO>() {
                    @Override
                    public Class<? extends org.wso2.am.integration.clients.publisher.api.dto.SearchResultDTO> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("APIProductSearchResult", org.wso2.am.integration.clients.publisher.api.dto.APIProductSearchResultDTO.class);
                        classByDiscriminatorValue.put("APISearchResult", org.wso2.am.integration.clients.publisher.api.dto.APISearchResultDTO.class);
                        classByDiscriminatorValue.put("DocumentSearchResult", org.wso2.am.integration.clients.publisher.api.dto.DocumentSearchResultDTO.class);
                        classByDiscriminatorValue.put("SearchResult", org.wso2.am.integration.clients.publisher.api.dto.SearchResultDTO.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "name"));
                    }
          })
                .registerTypeSelector(org.wso2.am.integration.clients.publisher.api.dto.ThrottlePolicyDTO.class, new TypeSelector<org.wso2.am.integration.clients.publisher.api.dto.ThrottlePolicyDTO>() {
                    @Override
                    public Class<? extends org.wso2.am.integration.clients.publisher.api.dto.ThrottlePolicyDTO> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ThrottlePolicy", org.wso2.am.integration.clients.publisher.api.dto.ThrottlePolicyDTO.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIBusinessInformationDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APICategoryDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APICategoryListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APICorsConfigurationDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIExternalStoreDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIExternalStoreListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIInfoAdditionalPropertiesInnerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIInfoAdditionalPropertiesMapValueDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIKeyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIMaxTpsDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIMetadataDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIMetadataListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIMonetizationInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIMonetizationUsageDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIOperationPoliciesDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIOperationsDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIProductBusinessInformationDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIProductDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIProductInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIProductListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIProductOutdatedStatusDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIProductSearchResultDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIRevenueDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIRevisionAPIInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIRevisionDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIRevisionDeploymentDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIRevisionDeploymentListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIRevisionListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIScopeDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APISearchResultDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIServiceInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIThreatProtectionPoliciesDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.APIThreatProtectionPoliciesListInnerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.AdditionalPropertyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.AdvertiseInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ApiEndpointValidationResponseDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ApplicationDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ApplicationInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.AsyncAPISpecificationValidationResponseDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.AsyncAPISpecificationValidationResponseInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.AuditReportDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.BandwidthLimitDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CertMetadataDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CertificateInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CertificateValidityDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CertificatesDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ClaimDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ClientCertMetadataDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ClientCertificatesDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CommentDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CommentListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CommenterInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.CustomAttributeDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.DocumentDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.DocumentListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.DocumentSearchResultDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EndpointConfigAttributesInnerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EndpointConfigDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EndpointDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EndpointEndpointConfigDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EndpointEndpointSecurityDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EndpointListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EnvironmentDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EnvironmentListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ErrorDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ErrorListItemDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.EventCountLimitDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ExternalStoreDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ExternalStoreListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.FileInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GatewayEnvironmentProtocolURIDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GatewayPolicyDeploymentDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GatewayPolicyMappingDataListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GatewayPolicyMappingDeploymentInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GatewayPolicyMappingInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GatewayPolicyMappingsDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLCustomComplexityInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLQueryComplexityInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLQueryDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLSchemaDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLSchemaTypeDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLSchemaTypeListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLValidationResponseDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.GraphQLValidationResponseGraphQLInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.KeyManagerInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.KeyManagerListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.LifecycleHistoryDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.LifecycleHistoryItemDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.LifecycleStateAvailableTransitionsInnerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.LifecycleStateCheckItemsInnerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.LifecycleStateDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.MediationPolicyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.MockResponsePayloadInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.MockResponsePayloadListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.MonetizationAttributeDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.MonetizationInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.OpenAPIDefinitionValidationResponseDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.OpenAPIDefinitionValidationResponseInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.OperationPolicyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.OperationPolicyDataDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.OperationPolicyDataListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.OperationPolicyImportExportDataDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.OperationPolicySpecAttributeDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.PaginationDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.PatchRequestBodyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.PostRequestBodyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ProductAPIDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.RequestCountLimitDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ResourcePathDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ResourcePathListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ResourcePolicyInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ResourcePolicyListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ScopeDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ScopeListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SearchResultListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SecurityAuditAttributeDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SequenceBackendDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SequenceBackendListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SettingsDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SharedScopeUsageDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SharedScopeUsedAPIInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SharedScopeUsedAPIResourceInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SubscriberInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SubscriptionDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SubscriptionListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SubscriptionPolicyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SubscriptionPolicyListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.SubscriptionThrottlePolicyPermissionDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.TenantDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.TenantListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ThreatProtectionPolicyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ThreatProtectionPolicyListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ThrottleLimitBaseDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ThrottleLimitDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ThrottlePolicyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ThrottlingPolicyDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.ThrottlingPolicyListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.TopicDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.TopicListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.VHostDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.WSDLInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.WSDLValidationResponseDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.WSDLValidationResponseWsdlInfoDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.WSDLValidationResponseWsdlInfoEndpointsInnerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.WebsubSubscriptionConfigurationDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.wso2.am.integration.clients.publisher.api.dto.WorkflowResponseDTO.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
